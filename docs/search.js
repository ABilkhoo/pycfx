window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"pycfx": {"fullname": "pycfx", "modulename": "pycfx", "kind": "module", "doc": "<p>Documentation for PyCFX</p>\n"}, "pycfx.benchmarker": {"fullname": "pycfx.benchmarker", "modulename": "pycfx.benchmarker", "kind": "module", "doc": "<p>PyCFX Benchmarker: counterfactual benchmarker, metrics, factories for generators and models</p>\n\n<p>Benchmarking overview:</p>\n\n<ul>\n<li><code>CFBenchmarker</code> allows you to specify a dataset, the scale of benchmark (number of test points), metrics to use, models to use and generators to benchmark. See usage in <code>results/</code></li>\n<li>Produces results DataFrames for programmatic use of results, stores results in JSON and LATEX tables, and can produce figures.</li>\n<li>Available metrics: Validity, Failures, Implausibility, Plausibility (LOF), Distance, Sensitivity, Stability.</li>\n</ul>\n"}, "pycfx.benchmarker.counterfactual_benchmarker": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "kind": "module", "doc": "<p>pycfx/benchmarker/counterfactual_benchmarker.py\nBenchmarker for Counterfactual Explanations</p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker", "kind": "class", "doc": "<p>CFBenchmarker: Benchmarker for Counterfactual Explanations</p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.__init__", "kind": "function", "doc": "<p>Initialise benchmarker with a <code>dataset</code>, number <code>n_factuals_main</code> of factuals to include the main bank, number of repeats <code>n_repeats</code>,\nlist <code>metrics</code> of <code>CFBenchmarkerMetrics</code> to use, list <code>model_factory</code> of <code>ModelFactory</code>s to obtain models from,\nlist <code>generator_factories</code> of <code>GeneratorFactory</code>s used to compute CFXs.\nSpecify save_dir, use_pretrained and id to save and retrieve results</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">n_factuals_main</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_repeats</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">benchmarker</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">CFBenchmarkerMetric</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">model_factories</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">benchmarker</span><span class=\"o\">.</span><span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"n\">ModelFactory</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">generator_factories</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">benchmarker</span><span class=\"o\">.</span><span class=\"n\">factories</span><span class=\"o\">.</span><span class=\"n\">GeneratorFactory</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;experiments&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.dataset", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.n_factuals_main", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.n_repeats", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.use_pretrained", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.metrics", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.model_factories", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.generator_factories", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.save_dir", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.models_evaluation_path", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.factuals_path", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.counterfactuals_path", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.eval_path_raw", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.eval_path_table", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.eval_path_table_2", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.figs_save_dir", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.generators_dir", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.models_dir", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.conformal_eval_raw_path", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.conformal_eval_text_path", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.conformal_eval_table", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.additional_conformal", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.get_dataset", "kind": "function", "doc": "<p>Get the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.setup_models", "kind": "function", "doc": "<ol>\n<li>Setup all models</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.evaluate_models", "kind": "function", "doc": "<ol start=\"2\">\n<li>Evaluate all models. Stores evaluation results in save_path / \"model_evaluation.json\"</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.set_factuals", "kind": "function", "doc": "<ol start=\"3\">\n<li>Set all factuals, the main bank plus any additional banks specified by the metrics. \nStores factuals at model_path (within save_dir) / \"factuals.json\"</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.initialise_generators", "kind": "function", "doc": "<ol start=\"4\">\n<li>Initialise and set up all generators</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.get_counterfactuals", "kind": "function", "doc": "<ol start=\"5\">\n<li>Compute counterfactual explanations for all factuals over all generators.\nStores counterfactuals at model_path (within save_dir) / \"counterfactuals.json\"</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reset</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.evaluate_counterfactuals", "kind": "function", "doc": "<ol start=\"6\">\n<li>Evaluate generated counterfactual explanations using the specified metrics. \nSaves JSON results to save_dir / evaluation_raw.json, and a LaTeX table to save_dir / evaluation_table.txt</li>\n</ol>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">aggregate_means</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.generate_table", "kind": "function", "doc": "<p>Generate a formatted DataFrame and LaTeX table with this benchmarker's results. Saves to evaluation_table_2.txt.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>formatted_col_names: Column names of the table (i.e. metric names)</li>\n<li>structure: The order in which generators should be presented. </li>\n<li>indent_map: config properties that should be displayed indented on the table. Supports up to 2 layers of identation</li>\n<li>format_map: used to identify raw generator names that map to display names used in structure and indent_map</li>\n<li>*_metric: specify the metric name for the particular metric. Otherwise will pick the first matching metric</li>\n<li>report_failures, report_invalidity: if True, will add lines to the text file detailing failures and invalidity</li>\n<li>dp2: round to 2dp.</li>\n<li>scaling: specify list of column indices and corresponding scaling factor. E.g. [(3, 0.1)] to scale 3rd column by 10%</li>\n</ul>\n\n<p>For example usage, see results/results_notebook.ipynb</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">formatted_col_names</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">indent_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">format_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">generators_predicate</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"n\">CFBenchmarker</span><span class=\"o\">.&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">plausibility_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">implausibility_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sensitivity_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stability_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">validity_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">failures_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">report_failures</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">report_invalidity</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dp2</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">scaling</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">include_extra</span><span class=\"o\">=</span><span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.get_alpha_bandwidth_plots", "kind": "function", "doc": "<p>Generate distance or plausibility plots against alpha and kernel bandwidth. Requires that the config of the generators contains 'alpha' and/or 'kernel_bandwidth'.\nSaves to figures directory in save_dir.</p>\n\n<p>For example usage, see results/results_notebook.ipynb</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">distance_metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">plausibility_metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.get_means_sds", "kind": "function", "doc": "<p>Helper function to decompose a DataFrame of dictionary objects containing 'mean' and 'sd' keys into two DataFrames, one for mean and one for sd.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.set_additional_conformal", "kind": "function", "doc": "<p>Specify additional conformal classes and their config/config_multi (similar to GeneratorFactory) for these to be evaluated in .test_conformal().</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">conformal_classes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">split_conformal</span><span class=\"o\">.</span><span class=\"n\">SplitConformalPrediction</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">conformal_config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">conformal_config_multi</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.test_conformal", "kind": "function", "doc": "<p>Evaluate the coverage gap and average set size over four schemes: (1) Marginal (2) Class conditional (3) Random binning (10 bins) (4) Counterfactual Simulation\nSaves to conformal_eval.json and conformal_eval.txt</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">write_to_file</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.generate_conformal_table", "kind": "function", "doc": "<p>Generate a formatted DataFrame and LaTeX table with the conformal evaluatation results. Saves to conformal_table.txt.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>structure: The order in which SplitConformalPrediction (+subclasses) instances should be presented. </li>\n<li>indent_map: config properties that should be displayed indented on the table. Supports up to 2 layers of identation</li>\n<li>format_map: used to identify raw generator names that map to display names used in structure and indent_map</li>\n<li>include_size: add a column for average set size.</li>\n</ul>\n\n<p>For example usage, see results/results_notebook.ipynb</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">indent_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">format_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">include_size</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.generate_conformal_sim_plot", "kind": "function", "doc": "<p>Create a plot of coverage gap against alpha and kernel bandwidth.\nFor example usage, see results/results_notebook.ipynb</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"fullname": "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure", "modulename": "pycfx.benchmarker.counterfactual_benchmarker", "qualname": "CFBenchmarker.format_table_with_structure", "kind": "function", "doc": "<p>Helper to generate DataFrame rows to be concatenated into a formatted table following structure, indent_map and format_map</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>structure: The order in which SplitConformalPrediction (+subclasses) instances should be presented. </li>\n<li>indent_map: config properties that should be displayed indented on the table. Supports up to 2 layers of identation</li>\n<li>format_map: used to identify raw generator names that map to display names used in structure and indent_map</li>\n<li>columns: names of columns in df</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">df</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">structure</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">indent_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">format_map</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.factories": {"fullname": "pycfx.benchmarker.factories", "modulename": "pycfx.benchmarker.factories", "kind": "module", "doc": "<p>pycfx/benchmarker/factories.py\nFactories for generating models, generators under various configurations and repeats for use by CFBenchmarker</p>\n"}, "pycfx.benchmarker.factories.ModelFactory": {"fullname": "pycfx.benchmarker.factories.ModelFactory", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory", "kind": "class", "doc": "<p>ModelFactory: Create and train models with various configurations over multiple repeats.</p>\n"}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"fullname": "pycfx.benchmarker.factories.ModelFactory.__init__", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.__init__", "kind": "function", "doc": "<p>Create a factory for model class <code>Model</code>, with input_properties <code>input_properties</code>, specifying the config for all models with <code>config</code> and config to make variants with <code>config_multi</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">Model</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">config_multi</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, "pycfx.benchmarker.factories.ModelFactory.Model": {"fullname": "pycfx.benchmarker.factories.ModelFactory.Model", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.Model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"fullname": "pycfx.benchmarker.factories.ModelFactory.input_properties", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.input_properties", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.ModelFactory.config": {"fullname": "pycfx.benchmarker.factories.ModelFactory.config", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"fullname": "pycfx.benchmarker.factories.ModelFactory.config_multi", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.config_multi", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"fullname": "pycfx.benchmarker.factories.ModelFactory.train_models", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.train_models", "kind": "function", "doc": "<p>Train and return <code>n_repeat * len(product(config_multi.values()))</code> using the specified train set (X_train, y_train).\nSet save_dir and use_pretrained to allow for saving and loading models.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">n_repeats</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"fullname": "pycfx.benchmarker.factories.ModelFactory.get_models", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.get_models", "kind": "function", "doc": "<p>Get a list all models created by the factory</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"fullname": "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats", "modulename": "pycfx.benchmarker.factories", "qualname": "ModelFactory.get_models_over_repeats", "kind": "function", "doc": "<p>Get a dictionary where the keys represent an individual model config, and the values contain the <code>n_repeat</code> models for the corresponding config.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.factories.GeneratorFactory": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory", "kind": "class", "doc": "<p>ModelFactory: Create and initialise multiple generators with various configurations.</p>\n"}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.__init__", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.__init__", "kind": "function", "doc": "<p>Create a factory for many generator classes <code>generators_classes</code>, specifying the config for all generators with <code>config</code> and config to make variants with <code>config_multi</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">generators_classes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">cf_generator</span><span class=\"o\">.</span><span class=\"n\">CounterfactualGenerator</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">config_multi</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span>)</span>"}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.generators_classes", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.generators_classes", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.config", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.config_multi", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.config_multi", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.generators", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.generators", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.setup_generators", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.setup_generators", "kind": "function", "doc": "<p>Setup and return all generators using the model, input_properties, training data (X_train, y_train), and calibration data (X_calib, y_calib).\nSpecify save_dir and use_pretrained to allow generators to store and reuse data during setup.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">cf_generator</span><span class=\"o\">.</span><span class=\"n\">CounterfactualGenerator</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"fullname": "pycfx.benchmarker.factories.GeneratorFactory.get_generators", "modulename": "pycfx.benchmarker.factories", "qualname": "GeneratorFactory.get_generators", "kind": "function", "doc": "<p>Get a list of all generators. Call <code>setup_generators</code> first.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">cf_generator</span><span class=\"o\">.</span><span class=\"n\">CounterfactualGenerator</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics": {"fullname": "pycfx.benchmarker.metrics", "modulename": "pycfx.benchmarker.metrics", "kind": "module", "doc": "<p>pycfx/benchmarker/metrics.py\nMetrics to the benchmarker CFBenchmarker to evaluate generated counterfactual explanations with.</p>\n"}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"fullname": "pycfx.benchmarker.metrics.CFBenchmarkerMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "CFBenchmarkerMetric", "kind": "class", "doc": "<p>Abstract metric for use with CFBenchmarker</p>\n"}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"fullname": "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank", "modulename": "pycfx.benchmarker.metrics", "qualname": "CFBenchmarkerMetric.get_factuals_bank", "kind": "function", "doc": "<p>Specify additional factuals for which the benchmarker should compute CFXs for. \nUse the <code>model</code>, <code>input_properties</code>, <code>split_dataset</code>, and current <code>factuals_bank</code> (consisting of a dictionary of bank name to (factuals, targets)), and a random seed.\nReturn a bank name, bank factuals, and bank targets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">split_dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "CFBenchmarkerMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"fullname": "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "CFBenchmarkerMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"fullname": "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank", "modulename": "pycfx.benchmarker.metrics", "qualname": "CFBenchmarkerMetric.get_bank", "kind": "function", "doc": "<p>Obtain a cleaned bank of (factuals, targets, counterfactuals)\nSpecify drop_nan to exclude nan points\nSpecify ensure_enc and input_properties to exclude incorrectly encoded points\nSpecify ensure_enc and model to exclude failed counterfactuals (i.e. those which do not change the prediction to the target class)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bank_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;main&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">drop_nan</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ensure_enc</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.ValidityMetric": {"fullname": "pycfx.benchmarker.metrics.ValidityMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "ValidityMetric", "kind": "class", "doc": "<p>ValidityMetric: Is the generated CFX valid i.e. the model predicts the target class for it?</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.ValidityMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "ValidityMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">split_dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"fullname": "pycfx.benchmarker.metrics.ValidityMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "ValidityMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.FailuresMetric": {"fullname": "pycfx.benchmarker.metrics.FailuresMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "FailuresMetric", "kind": "class", "doc": "<p>FailuresMetric: Did the generator obtain a CFX, i.e. did not fail due to any error or MILP infeasibility issues.</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.FailuresMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "FailuresMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">split_dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"fullname": "pycfx.benchmarker.metrics.FailuresMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "FailuresMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"fullname": "pycfx.benchmarker.metrics.ImplausibilityMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "ImplausibilityMetric", "kind": "class", "doc": "<p>ImplausibilityMetric: Is the generated CFX plausible to the target class? Uses the average distance of the CFX to the closest <code>included_prop</code>% of points in the target class \nFor implausiblity, see Altmeyer, Patrick, et al. \"Faithful model explanations through energy-constrained conformal counterfactuals.\" (2024)</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"fullname": "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__", "modulename": "pycfx.benchmarker.metrics", "qualname": "ImplausibilityMetric.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">included_prop</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span>)</span>"}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"fullname": "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop", "modulename": "pycfx.benchmarker.metrics", "qualname": "ImplausibilityMetric.included_prop", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "ImplausibilityMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"fullname": "pycfx.benchmarker.metrics.ImplausibilityMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "ImplausibilityMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.LOFMetric": {"fullname": "pycfx.benchmarker.metrics.LOFMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "LOFMetric", "kind": "class", "doc": "<p>LOFMetric: Is the generated CFX plausible to the target class? Uses the the local outlier factory with novelty=True, specified <code>n_neighbours</code>, and specified stratification by target class</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"fullname": "pycfx.benchmarker.metrics.LOFMetric.__init__", "modulename": "pycfx.benchmarker.metrics", "qualname": "LOFMetric.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_neighbours</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">stratified</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"fullname": "pycfx.benchmarker.metrics.LOFMetric.n_neighbours", "modulename": "pycfx.benchmarker.metrics", "qualname": "LOFMetric.n_neighbours", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"fullname": "pycfx.benchmarker.metrics.LOFMetric.stratified", "modulename": "pycfx.benchmarker.metrics", "qualname": "LOFMetric.stratified", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.LOFMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "LOFMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.LOFMetric.name": {"fullname": "pycfx.benchmarker.metrics.LOFMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "LOFMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.DistanceMetric": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric", "kind": "class", "doc": "<p>DistanceMetric: How far (costly) is the CFX from the target class?\nUses the L-<code>norm</code> distance, optionally weighted by <code>dist_weight</code> or specify mad=True to use the median absolute deviation</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric.__init__", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">mad</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">dist_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric.norm", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric.norm", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric.mad", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric.mad", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric.dist_weight", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric.dist_weight", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"fullname": "pycfx.benchmarker.metrics.DistanceMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "DistanceMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.SensitivityMetric": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric", "kind": "class", "doc": "<p>SensitivityMetric: How much a counterfactual explanation changes when the original instance x is perturbed within a small neighbourhood. \nFormally, given an input x and its counterfactual x_c, we uniformly sample a perturbed instance x' from the L_2 ball centred around the factual, compute a new counterfactual $x'_c$. \nSensitivity is then defined as the relative deviation between the two counterfactuals, normalised by the cost of the initial counterfactual.</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.__init__", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_sensitivity</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">n_neighbours</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">budget</span><span class=\"o\">=</span><span class=\"mf\">0.05</span></span>)</span>"}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.n_sensitivity", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.n_neighbours", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.budget", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.budget", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.get_factuals_bank", "kind": "function", "doc": "<p>Specify additional factuals for which the benchmarker should compute CFXs for. \nUse the <code>model</code>, <code>input_properties</code>, <code>split_dataset</code>, and current <code>factuals_bank</code> (consisting of a dictionary of bank name to (factuals, targets)), and a random seed.\nReturn a bank name, bank factuals, and bank targets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">split_dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"fullname": "pycfx.benchmarker.metrics.SensitivityMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "SensitivityMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.StabilityMetric": {"fullname": "pycfx.benchmarker.metrics.StabilityMetric", "modulename": "pycfx.benchmarker.metrics", "qualname": "StabilityMetric", "kind": "class", "doc": "<p>StabilityMetric: Stability measures how consistent the counterfactual is under perturbations applied directly to the counterfactual itself. \nThe counterfactual x_c is perturbed within a budgeted neighbourhood and evaluate the variance in the model predictions across these perturbed samples.\nAdapted from Dutta et. al. Robust counterfactual explanations for tree-based ensembles (2022)</p>\n", "bases": "CFBenchmarkerMetric"}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"fullname": "pycfx.benchmarker.metrics.StabilityMetric.__init__", "modulename": "pycfx.benchmarker.metrics", "qualname": "StabilityMetric.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_neighbours</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">budget</span><span class=\"o\">=</span><span class=\"mf\">0.05</span></span>)</span>"}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"fullname": "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours", "modulename": "pycfx.benchmarker.metrics", "qualname": "StabilityMetric.n_neighbours", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"fullname": "pycfx.benchmarker.metrics.StabilityMetric.budget", "modulename": "pycfx.benchmarker.metrics", "qualname": "StabilityMetric.budget", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"fullname": "pycfx.benchmarker.metrics.StabilityMetric.compute_metric", "modulename": "pycfx.benchmarker.metrics", "qualname": "StabilityMetric.compute_metric", "kind": "function", "doc": "<p>Get the metric computation (unaggregated) for this metric given the <code>model</code>, <code>input_properties</code>, <code>dataset</code>, <code>factuals_bank</code> and <code>counterfactuals_bank</code>.\n<code>factuals_bank</code> is a dictionary of bank name to (factuals, targets)\n<code>counterfactuals_bank</code> is a dictionary of bank name to computed counterfactuals.\nReturns the unaggregated metrics</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">Dataset</span>,</span><span class=\"param\">\t<span class=\"n\">factuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactuals_bank</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"fullname": "pycfx.benchmarker.metrics.StabilityMetric.name", "modulename": "pycfx.benchmarker.metrics", "qualname": "StabilityMetric.name", "kind": "function", "doc": "<p>Get the name of this metric</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"fullname": "pycfx.benchmarker.metrics.define_counterfactual_targets", "modulename": "pycfx.benchmarker.metrics", "qualname": "define_counterfactual_targets", "kind": "function", "doc": "<p>Helper function to give some factual points X_factual a random target from n_classes, for which the model_enc does not currently predict.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_factual</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model_enc</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">n_classes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal": {"fullname": "pycfx.conformal", "modulename": "pycfx.conformal", "kind": "module", "doc": "<p>PyCFX Conformal Prediction:</p>\n\n<p>Conformal prediction overview:</p>\n\n<ul>\n<li><code>SplitConformalPrediction</code>: Vanilla split conformal prediction</li>\n<li><code>BaseLCP</code>: Localised conformal prediction (see <a href=\"https://arxiv.org/abs/2106.08460\">Guan, 2021</a>)</li>\n<li><code>ConformalCONFEXTree</code>: Localised CP via CONFEXTree, see [1]</li>\n<li>Registries for score functions and kernel functions</li>\n<li><code>losses_conformal</code>: Smooth set size losses from Stutz et. al. \"Learning optimal conformal classifiers.\" (2021), for use in gradient-based generators that utilise conformal prediction.</li>\n</ul>\n"}, "pycfx.conformal.conformal_benchmarker": {"fullname": "pycfx.conformal.conformal_benchmarker", "modulename": "pycfx.conformal.conformal_benchmarker", "kind": "module", "doc": "<p>pycfx/conformal/conformal_benchmarker.py\nBenchmarking utilities for evaluating coverage and set size of a calibrated SplitConformalPrediction instance.</p>\n"}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"fullname": "pycfx.conformal.conformal_benchmarker.compute_stats", "modulename": "pycfx.conformal.conformal_benchmarker", "qualname": "compute_stats", "kind": "function", "doc": "<p>Compute set size and coverage for given prediction intervals and target classes.</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>alpha: target miscoverage rate</li>\n<li>pred_intervals: An list containing prediction intervals returned by conformal.predict_batch</li>\n<li>y_correct: A list of the same length as pred_intervals, containing the true label</li>\n<li>indices: Set to an array of index positions of to filter pred_intervals and y_correct by, or set to None for no filtering</li>\n<li>cov_gap: If set to True, will return the percentage point difference between the target coverage rate and empirical coverage. \nOtherwise will return empirical empirical coverage rate as as a float.</li>\n</ul>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>,</span><span class=\"param\">\t<span class=\"n\">pred_intervals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_correct</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">indices</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cov_gap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"fullname": "pycfx.conformal.conformal_benchmarker.compute_stats_partition", "modulename": "pycfx.conformal.conformal_benchmarker", "qualname": "compute_stats_partition", "kind": "function", "doc": "<p>Given a partitioned scenario test set, each providing an average set size and coverage rate, compute an overall set size and coverage gap</p>\n\n<p>Parameters:</p>\n\n<ul>\n<li>alpha: target miscoverage rate</li>\n<li>set_sizes: list of average set sizes for each partition</li>\n<li>coverage: list of empirical coverage (float) for each partition</li>\n<li>partition_sizes: list of lengths of each partition. </li>\n<li>only_penalise_undercoverage: when computing the coverage gaps, ignore overcoverage.</li>\n<li>cov_gap: If set to True, will return the percentage point difference between the target coverage rate and empirical coverage. \nOtherwise will return empirical empirical coverage rate as as a float.</li>\n</ul>\n\n<p>Returns:\n    - Average set size and average coverage gap across all partitions.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>,</span><span class=\"param\">\t<span class=\"n\">set_sizes</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">coverage</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">partition_sizes</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">only_penalise_undercoverage</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">cov_gap</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"fullname": "pycfx.conformal.conformal_benchmarker.evaluate_conditional", "modulename": "pycfx.conformal.conformal_benchmarker", "qualname": "evaluate_conditional", "kind": "function", "doc": "<p>Run a suite of tests for a calibrated SplitConformalPrediction instance\nComputes empirical coverage and set sizes:</p>\n\n<ol>\n<li>Across full test set (marginal)</li>\n<li>Across the test set, stratified by class (class-conditional)</li>\n<li>Across the test set, split randomly into equal-sized bins (random binning)</li>\n<li>Using a counterfactual simulation (for each element in the test set, find the nearest neighbour element in the test set which is predicted to be a singleton set in the opposite class). Use this resampling of the test set for computing empirical coverage and set sizes.</li>\n</ol>\n\n<p>Parameters:</p>\n\n<ul>\n<li>conformal: Calibrated SplitConformalPrediction instance to test</li>\n<li>X: Test data</li>\n<li>y: Test labels</li>\n<li>n_bins: number of bins to use for random binning experiment, default 10</li>\n<li>cov_gap: If set to True, will return the percentage point difference between the target coverage rate and empirical coverage. \nOtherwise will return empirical empirical coverage rate as as a float.</li>\n<li>seed: seed to use for random binning experiment</li>\n<li>only_penalise_undercoverage: when computing the coverage gaps, ignore overcoverage.</li>\n<li>cov_gap: If set to True, will return the percentage point difference between the target coverage rate and empirical coverage. \nOtherwise will return empirical empirical coverage rate as as a float.</li>\n</ul>\n\n<p>Returns:\n    - Average set size and average coverage gap for experiments (1-4)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conformal</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">split_conformal</span><span class=\"o\">.</span><span class=\"n\">SplitConformalPrediction</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">n_bins</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cov_gap</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.conformal_helpers": {"fullname": "pycfx.conformal.conformal_helpers", "modulename": "pycfx.conformal.conformal_helpers", "kind": "module", "doc": "<p>pycfx/conformal/conformal_helpers.py\nHelpers for localised conformal prediction classes</p>\n"}, "pycfx.conformal.conformal_helpers.sample_points": {"fullname": "pycfx.conformal.conformal_helpers.sample_points", "modulename": "pycfx.conformal.conformal_helpers", "qualname": "sample_points", "kind": "function", "doc": "<p>Sample n_points points from a dataset (X, y), and returned the sampled (X, y).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">n_points</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"fullname": "pycfx.conformal.conformal_helpers.get_feature_ranges", "modulename": "pycfx.conformal.conformal_helpers", "qualname": "get_feature_ranges", "kind": "function", "doc": "<p>For each feature in dataset X, return the range provided by input_properties, or the observed range in X if input_properties does not specify a range.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"fullname": "pycfx.conformal.conformal_helpers.generate_grid_points", "modulename": "pycfx.conformal.conformal_helpers", "qualname": "generate_grid_points", "kind": "function", "doc": "<p>Sample points uniformly (i.e. from a grid) across the feature space.</p>\n\n<ul>\n<li>input_properties: InputProperties for dataset</li>\n<li>X: observed data to use to compute ranges if needed</li>\n<li>dim_reduction: Provide a DimensionalityReduction object to sample the grid points from within a lower-dimensional space.</li>\n<li>factor: Scale the number of returned points.</li>\n</ul>\n\n<p>Returns grid points.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dim_reduction</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">dim_reduction</span><span class=\"o\">.</span><span class=\"n\">DimensionalityReduction</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">factor</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"fullname": "pycfx.conformal.conformal_helpers.median_pairwise_distances", "modulename": "pycfx.conformal.conformal_helpers", "qualname": "median_pairwise_distances", "kind": "function", "doc": "<p>Compute the median of pairwise distances of points X (potentially after dimensionality reduction with dim_reduction)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">dim_reduction</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">dim_reduction</span><span class=\"o\">.</span><span class=\"n\">DimensionalityReduction</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels": {"fullname": "pycfx.conformal.kernels", "modulename": "pycfx.conformal.kernels", "kind": "module", "doc": "<p>pycfx/conformal/kernels.py\nKernel functions to be used by BaseLCP</p>\n"}, "pycfx.conformal.kernels.KERNEL_REGISTRY": {"fullname": "pycfx.conformal.kernels.KERNEL_REGISTRY", "modulename": "pycfx.conformal.kernels", "qualname": "KERNEL_REGISTRY", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;gaussian&#x27;: &lt;function gaussian_kernel&gt;, &#x27;box_l1&#x27;: &lt;function box_kernel_l1&gt;, &#x27;box_l2&#x27;: &lt;function box_kernel_l2&gt;, &#x27;box_linf&#x27;: &lt;function box_kernel_linf&gt;}"}, "pycfx.conformal.kernels.register_kernel": {"fullname": "pycfx.conformal.kernels.register_kernel", "modulename": "pycfx.conformal.kernels", "qualname": "register_kernel", "kind": "function", "doc": "<p>Decorator to apply to kernel function (of signature x1 (point), x2 (point), h (kernel bandwidth), input_properties: InputProperties) to add it to the registry.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels.get_kernel": {"fullname": "pycfx.conformal.kernels.get_kernel", "modulename": "pycfx.conformal.kernels", "qualname": "get_kernel", "kind": "function", "doc": "<p>Obtain a with key from the registry</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span><span class=\"p\">],</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels.feature_distance": {"fullname": "pycfx.conformal.kernels.feature_distance", "modulename": "pycfx.conformal.kernels", "qualname": "feature_distance", "kind": "function", "doc": "<p>Compute a mixed feature distance, which is the difference between x1[i] and x2[i] for non-categorical features.\nFor categorical features, take the distance to be 1 if they match and 0 otherwise.\nReturn the norm of these feature distances, specified by ord.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"nb\">ord</span>, </span><span class=\"param\"><span class=\"n\">input_properties</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels.gaussian_kernel": {"fullname": "pycfx.conformal.kernels.gaussian_kernel", "modulename": "pycfx.conformal.kernels", "qualname": "gaussian_kernel", "kind": "function", "doc": "<p>Gaussian kernel exp(-||x1-x2||_2^2 / 2h^2)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">input_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels.box_kernel_l1": {"fullname": "pycfx.conformal.kernels.box_kernel_l1", "modulename": "pycfx.conformal.kernels", "qualname": "box_kernel_l1", "kind": "function", "doc": "<p>Box kernel with L1 norm 1(||x1-x2||_1 &lt;= h)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">input_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels.box_kernel_l2": {"fullname": "pycfx.conformal.kernels.box_kernel_l2", "modulename": "pycfx.conformal.kernels", "qualname": "box_kernel_l2", "kind": "function", "doc": "<p>Box kernel with L2 norm 1(||x1-x2||_2 &lt;= h)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">input_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.kernels.box_kernel_linf": {"fullname": "pycfx.conformal.kernels.box_kernel_linf", "modulename": "pycfx.conformal.kernels", "qualname": "box_kernel_linf", "kind": "function", "doc": "<p>Box kernel with Linf norm 1(||x1-x2||_inf &lt;= h)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x1</span>, </span><span class=\"param\"><span class=\"n\">x2</span>, </span><span class=\"param\"><span class=\"n\">h</span>, </span><span class=\"param\"><span class=\"n\">input_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_lcp": {"fullname": "pycfx.conformal.localised_conformal_lcp", "modulename": "pycfx.conformal.localised_conformal_lcp", "kind": "module", "doc": "<p>pycfx/conformal/localised_conformal_baselcp.py\nImplementation of Localised Conformal Prediction (Guan, Leying. \"Conformal prediction with localization.\" (2019)) with added MILP implemention</p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP", "kind": "class", "doc": "<p>Implementation of Localised Conformal Prediction (Guan, Leying. \"Conformal prediction with localization.\" (2019)) with added MILP implemention</p>\n", "bases": "pycfx.conformal.split_conformal.SplitConformalPrediction"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.__init__", "kind": "function", "doc": "<p>Initialise with model, dataset input_properties and config.\nAlter the following with the config dict: {'alpha':0.05, 'scorefn_name':'linear2', 'dim_reduction':None}\nSet save_path and use_pretrained to save and re-use calibration predictions.</p>\n\n<p>Use a custom score function by adding it to the SCOREFN_REGISTRY (see pycfx/conformal/score_fns.py)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.kernel_name", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.kernel_bandwidth", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.kernel_bandwidth_scaling", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.kernel", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.sample_threshold", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.dim_reduction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pycfx.datasets.dim_reduction.DimensionalityReduction"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.scores_nonlocalised", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.med_pairwise_distance", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.is_calibrated", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.X_calib", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.y_calib", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.X_calib_encoded", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.calibrate", "kind": "function", "doc": "<p>Calibrate the conformal predictor around the <code>test_point</code> by taking the weighted quantile according to the specified kernel_name, kernel_bandwidth, kernel_bandwidth_scaling and optional dim_reduction.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">test_point</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.predict_batch", "kind": "function", "doc": "<p>Obtain conformal prediction intervals for a batch of examples X. Recalibrates for each example X.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"fullname": "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint", "modulename": "pycfx.conformal.localised_conformal_lcp", "qualname": "BaseLCP.gp_set_conformal_prediction_constraint", "kind": "function", "doc": "<p>Give the prediction of the model (in the output_vars MVar) for a test point (input_var), add an MVar constrained to the nonconformity score of each class.\nAlso sets self.quantile_val to be constrained to the weighted quantile to allow constraining the set size to be a singleton.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">input_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree": {"fullname": "pycfx.conformal.localised_conformal_tree", "modulename": "pycfx.conformal.localised_conformal_tree", "kind": "module", "doc": "<p>pycfx/conformal/localised_conformal_tree.py\nCONFEXTree implementation</p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode", "kind": "class", "doc": "<p>CONFEXTreeNode: Tree used by CONFEXTree</p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.__init__", "kind": "function", "doc": "<p>Initialize a CONFEXTreeNode with its parent, children (left_node, right_node), feature currently split by (feature, threshold), \nall points (points), scores for each point (scores), target quantile (alpha), splitting criterion (max_distance), \nbinary mask of points assigned to current leaf (points_mask), whether to include inf the quantile (inf_quantile), whether to consider a global quantile</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">parent</span>,</span><span class=\"param\">\t<span class=\"n\">left_node</span>,</span><span class=\"param\">\t<span class=\"n\">right_node</span>,</span><span class=\"param\">\t<span class=\"n\">value</span>,</span><span class=\"param\">\t<span class=\"n\">threshold</span>,</span><span class=\"param\">\t<span class=\"n\">feature</span>,</span><span class=\"param\">\t<span class=\"n\">points</span>,</span><span class=\"param\">\t<span class=\"n\">scores</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span>,</span><span class=\"param\">\t<span class=\"n\">max_distance</span>,</span><span class=\"param\">\t<span class=\"n\">points_mask</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inf_quantile</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">global_quantile</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.parent", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.left_node", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.right_node", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.value", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.threshold", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.feature", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.points", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.scores", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.alpha", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.max_distance", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.is_leaf", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.inf_quantile", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.global_quantile", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.n_dims", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.get_node_points", "kind": "function", "doc": "<p>Retrieve the points that belong to this node based on the mask.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.leaf_criterion_fulfilled", "kind": "function", "doc": "<p>Check if the node satisfies the leaf criterion based on the maximum width of the points.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.splitting_threshold", "kind": "function", "doc": "<p>Determine the feature and threshold for splitting the node.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.generate", "kind": "function", "doc": "<p>Recursively generate the tree by splitting nodes until the leaf criterion is fulfilled.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.predict", "kind": "function", "doc": "<p>Predict the value for a given input or batch of inputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.size_tree", "kind": "function", "doc": "<p>Calculate the total number of nodes and leaves in the tree.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.generate_sklearn_representation", "kind": "function", "doc": "<p>Generate a scikit-learn compatible representation of the tree. Passed to gurobi-machinelearning's tree encoding.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"fullname": "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "CONFEXTreeNode.visualise", "kind": "function", "doc": "<p>Visualise the tree structure in a human-readable format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree", "kind": "class", "doc": "<p>CONFEXTree: Compute a tree-based</p>\n", "bases": "pycfx.conformal.split_conformal.SplitConformalPrediction"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.__init__", "kind": "function", "doc": "<p>Initialize the ConformalCONFEXTree with the model, input properties, and configuration.\nAlter the following with the config dict: {'kernel_bandwidth':1, 'scorefn_name':'linear2', 'dim_reduction':None,  'kernel_bandwidth_scaling': True, cat_groups_to_ignore:[]}</p>\n\n<p>Setting dim_reduction will the CONFEXTree over the lower dimensional space given by dim_reduction.encode\nSetting cat_groups_to_ignore will not split on the specific indices corresponding a one-hot categorical feature.\nIf kernel_bandwidth_scaling is True, the specified kernel bandwidth is used as a multiplier with the median pairwise distance of the calibration points, else it is used as-is.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.kernel_bandwidth", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.kernel_bandwidth_scaling", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.inf_quantile", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.global_quantile", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.cat_groups_to_ignore", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.min_quantile", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.is_calibrated", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.med_pairwise_distance", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.gs", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.categorical_values_combinations", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.trees", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.get_tree", "kind": "function", "doc": "<p>Retrieve the generated CONFEX trees after calibration.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">localised_conformal_tree</span><span class=\"o\">.</span><span class=\"n\">CONFEXTreeNode</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.calibrate", "kind": "function", "doc": "<p>Calibrate the CONFEX tree using calibration data and scores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">test_point</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.predict", "kind": "function", "doc": "<p>Predict the conformal prediction interval for a single input.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.predict_batch", "kind": "function", "doc": "<p>Return the conformal prediction intervals for a batch of inputs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"fullname": "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint", "modulename": "pycfx.conformal.localised_conformal_tree", "qualname": "ConformalCONFEXTree.gp_set_conformal_prediction_constraint", "kind": "function", "doc": "<p>Add conformal prediction constraints to a Gurobi optimisation model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">input_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.losses_conformal": {"fullname": "pycfx.conformal.losses_conformal", "modulename": "pycfx.conformal.losses_conformal", "kind": "module", "doc": "<p>pycfx/conformal/losses_conformal.py\nSet size losses for split conformal prediction and localised conformal prediction.</p>\n"}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss", "kind": "class", "doc": "<p>SetSizeLoss: Implementation of smooth set size loss from Stutz et. al. \"Learning optimal conformal classifiers.\" (2021).\n             Used in ECCCo from Altmeyer, et al. \"Faithful model explanations through energy-constrained conformal counterfactuals.\" (2024)</p>\n", "bases": "pycfx.counterfactual_explanations.differentiable.losses.Loss"}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss.__init__", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss.__init__", "kind": "function", "doc": "<p>Initialise with a SplitConformalPrediction object, T: temperature for sigmoid fn in soft label assignment, kappa: target set size.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conformal</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">split_conformal</span><span class=\"o\">.</span><span class=\"n\">SplitConformalPrediction</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss.conformal", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss.conformal", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss.T", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss.T", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss.kappa", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss.kappa", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss.soft_label_assignment", "kind": "function", "doc": "<p>Obtain the soft label assignment sigmoid(quantile_val - scorefn(fx, y) / T)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fx</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss.loss", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss.loss", "kind": "function", "doc": "<p>Obtain the smooth conformal set size for opt_state.x_enc: max(0, sum(soft_label_assignment) - kappa)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">opt_state</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">differentiable</span><span class=\"o\">.</span><span class=\"n\">optimisation_loop</span><span class=\"o\">.</span><span class=\"n\">OptimisationState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_PyTorch", "kind": "class", "doc": "<p>PyTorch implementation of SetSizeLoss</p>\n", "bases": "SetSizeLoss"}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_PyTorch.__init__", "kind": "function", "doc": "<p>Initialise with a SplitConformalPrediction object, T: temperature for sigmoid fn in soft label assignment, kappa: target set size.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conformal</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">split_conformal</span><span class=\"o\">.</span><span class=\"n\">SplitConformalPrediction</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_PyTorch.kappa", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_PyTorch.soft_label_assignment", "kind": "function", "doc": "<p>Obtain the soft label assignment sigmoid(quantile_val - scorefn(fx, y) / T)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fx</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_PyTorch.loss", "kind": "function", "doc": "<p>Obtain the smooth conformal set size for opt_state.x_enc: max(0, sum(soft_label_assignment) - kappa)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">opt_state</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">differentiable</span><span class=\"o\">.</span><span class=\"n\">optimisation_loop</span><span class=\"o\">.</span><span class=\"n\">OptimisationState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_TensorFlow", "kind": "class", "doc": "<p>TensorFlow implementation of SetSizeLoss</p>\n", "bases": "SetSizeLoss"}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_TensorFlow.__init__", "kind": "function", "doc": "<p>Initialise with a SplitConformalPrediction object, T: temperature for sigmoid fn in soft label assignment, kappa: target set size.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">conformal</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">split_conformal</span><span class=\"o\">.</span><span class=\"n\">SplitConformalPrediction</span>,</span><span class=\"param\">\t<span class=\"n\">T</span><span class=\"o\">=</span><span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">kappa</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_TensorFlow.kappa", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_TensorFlow.soft_label_assignment", "kind": "function", "doc": "<p>Obtain the soft label assignment sigmoid(quantile_val - scorefn(fx, y) / T)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fx</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"fullname": "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss", "modulename": "pycfx.conformal.losses_conformal", "qualname": "SetSizeLoss_TensorFlow.loss", "kind": "function", "doc": "<p>Obtain the smooth conformal set size for opt_state.x_enc: max(0, sum(soft_label_assignment) - kappa)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">opt_state</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">differentiable</span><span class=\"o\">.</span><span class=\"n\">optimisation_loop</span><span class=\"o\">.</span><span class=\"n\">OptimisationState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.milp_utils": {"fullname": "pycfx.conformal.milp_utils", "modulename": "pycfx.conformal.milp_utils", "kind": "module", "doc": "<p>pycfx/conformal/milp_utils.py\nUtilities for constructing MILP instances.</p>\n"}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"fullname": "pycfx.conformal.milp_utils.gp_set_np_mvar", "modulename": "pycfx.conformal.milp_utils", "qualname": "gp_set_np_mvar", "kind": "function", "doc": "<p>Add an np.array of elements <code>numbers</code> to the grb_model as a constant MVar with name <code>name</code>.\nReturns the mvar.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">numbers</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.milp_utils.gp_get_weights": {"fullname": "pycfx.conformal.milp_utils.gp_get_weights", "modulename": "pycfx.conformal.milp_utils", "qualname": "gp_get_weights", "kind": "function", "doc": "<p>Given a set of calibration points <code>values_mvar</code> and a test point <code>point_mvar</code>, compute the weights of each calibration point in the LCP procedure using a \nbox kernel with kernel bandwidth <code>threshold_val</code> and a mixed L-<code>norm</code> feature distance. If input_properties is None, all features are considered numeric.\nReturns the weights MVar, of shape (values_mvar.shape[0])</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">values_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">point_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">threshold_val</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">bigM</span><span class=\"o\">=</span><span class=\"mf\">1000.0</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.milp_utils.gp_get_quantile": {"fullname": "pycfx.conformal.milp_utils.gp_get_quantile", "modulename": "pycfx.conformal.milp_utils", "qualname": "gp_get_quantile", "kind": "function", "doc": "<p>Given a list of numbers in nums_mvar, and a target <code>alpha</code>-quantile, returns a Var quantile_val which is constrained to the <code>alpha</code>-quantile of nums_mvar.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">nums_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">bigM</span><span class=\"o\">=</span><span class=\"mf\">1000.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Var</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"fullname": "pycfx.conformal.milp_utils.gp_get_weighted_quantile", "modulename": "pycfx.conformal.milp_utils", "qualname": "gp_get_weighted_quantile", "kind": "function", "doc": "<p>Given a sorted list of numbers <code>scores_sorted_mvar</code> with their corresponding weights for computing the quantile <code>weights_corresponding_mvar</code>,\nreturns a Var which is constrained to the weighted <code>alpha</code>-quantile of the numbers (in our case, nonconformity scores). Includes an additional weight for the delta at +inf.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">scores_sorted_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">weights_corresponding_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Var</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"fullname": "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new", "modulename": "pycfx.conformal.milp_utils", "qualname": "gp_get_weighted_quantile_new", "kind": "function", "doc": "<p>Alternate implementation of gp_get_weighted_quantile.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">scores_sorted</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">weights_corresponding_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">eps</span><span class=\"o\">=</span><span class=\"mf\">1e-05</span>,</span><span class=\"param\">\t<span class=\"n\">bigM</span><span class=\"o\">=</span><span class=\"mi\">100</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Var</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.score_fns": {"fullname": "pycfx.conformal.score_fns", "modulename": "pycfx.conformal.score_fns", "kind": "module", "doc": "<p>pycfx/conformal/score_fns.py\nScore functions used by SplitConformalPrediction, and subclasses.</p>\n"}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"fullname": "pycfx.conformal.score_fns.SCOREFN_REGISTRY", "modulename": "pycfx.conformal.score_fns", "qualname": "SCOREFN_REGISTRY", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;softmax&#x27;: &lt;class &#x27;pycfx.conformal.score_fns.SoftmaxScoreFn&#x27;&gt;, &#x27;linear&#x27;: &lt;class &#x27;pycfx.conformal.score_fns.LinearScoreFn&#x27;&gt;, &#x27;linear2&#x27;: &lt;class &#x27;pycfx.conformal.score_fns.Linear2ScoreFn&#x27;&gt;, &#x27;linear_normalised&#x27;: &lt;class &#x27;pycfx.conformal.score_fns.LinearNormalisedScoreFn&#x27;&gt;}"}, "pycfx.conformal.score_fns.ScoreFn": {"fullname": "pycfx.conformal.score_fns.ScoreFn", "modulename": "pycfx.conformal.score_fns", "qualname": "ScoreFn", "kind": "class", "doc": "<p>Abstract ScoreFn class</p>\n", "bases": "abc.ABC"}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"fullname": "pycfx.conformal.score_fns.MILPEncodableScoreFn", "modulename": "pycfx.conformal.score_fns", "qualname": "MILPEncodableScoreFn", "kind": "class", "doc": "<p>Abstract score which has a corresponding MILP encoding.</p>\n", "bases": "ScoreFn"}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"fullname": "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores", "modulename": "pycfx.conformal.score_fns", "qualname": "MILPEncodableScoreFn.gp_encode_scores", "kind": "function", "doc": "<p>Define constraints for the variable <code>scores</code> (shape: n_classes) to represent the nonconformity scores based on the model's predictions <code>output_vars</code> for each class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span>, </span><span class=\"param\"><span class=\"n\">scores</span>, </span><span class=\"param\"><span class=\"n\">output_vars</span>, </span><span class=\"param\"><span class=\"n\">input_properties</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.score_fns.register_scorefn": {"fullname": "pycfx.conformal.score_fns.register_scorefn", "modulename": "pycfx.conformal.score_fns", "qualname": "register_scorefn", "kind": "function", "doc": "<p>Decorator to add a ScoreFn subclass to the SCOREFN_REGISTRY with key <code>key</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.score_fns.get_scorefn": {"fullname": "pycfx.conformal.score_fns.get_scorefn", "modulename": "pycfx.conformal.score_fns", "qualname": "get_scorefn", "kind": "function", "doc": "<p>Get the score function class with key <code>key</code> from the registry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">conformal</span><span class=\"o\">.</span><span class=\"n\">score_fns</span><span class=\"o\">.</span><span class=\"n\">ScoreFn</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"fullname": "pycfx.conformal.score_fns.SoftmaxScoreFn", "modulename": "pycfx.conformal.score_fns", "qualname": "SoftmaxScoreFn", "kind": "class", "doc": "<p>Softmax score: s(x, y) = 1 - logit of class y</p>\n", "bases": "ScoreFn"}, "pycfx.conformal.score_fns.LinearScoreFn": {"fullname": "pycfx.conformal.score_fns.LinearScoreFn", "modulename": "pycfx.conformal.score_fns", "qualname": "LinearScoreFn", "kind": "class", "doc": "<p>Linear score: s(x, y) = max logit - logit of class y</p>\n", "bases": "MILPEncodableScoreFn"}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"fullname": "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores", "modulename": "pycfx.conformal.score_fns", "qualname": "LinearScoreFn.gp_encode_scores", "kind": "function", "doc": "<p>Define constraints for the variable <code>scores</code> (shape: n_classes) to represent the nonconformity scores based on the model's predictions <code>output_vars</code> for each class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"fullname": "pycfx.conformal.score_fns.Linear2ScoreFn", "modulename": "pycfx.conformal.score_fns", "qualname": "Linear2ScoreFn", "kind": "class", "doc": "<p>Linear score: s(x, y) = max logit (exluding class y) - logit of class y \nFor binary classification, this is the difference between the two logits.</p>\n", "bases": "MILPEncodableScoreFn"}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"fullname": "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores", "modulename": "pycfx.conformal.score_fns", "qualname": "Linear2ScoreFn.gp_encode_scores", "kind": "function", "doc": "<p>Define constraints for the variable <code>scores</code> (shape: n_classes) to represent the nonconformity scores based on the model's predictions <code>output_vars</code> for each class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"fullname": "pycfx.conformal.score_fns.LinearNormalisedScoreFn", "modulename": "pycfx.conformal.score_fns", "qualname": "LinearNormalisedScoreFn", "kind": "class", "doc": "<p>Linear normalised score: s(x, y) = 1 - logit of class y\nNote that fx_logits add up to 1 and heuristically look like probabilities for each class, e.g. with a random forest model.</p>\n", "bases": "MILPEncodableScoreFn"}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"fullname": "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores", "modulename": "pycfx.conformal.score_fns", "qualname": "LinearNormalisedScoreFn.gp_encode_scores", "kind": "function", "doc": "<p>Define constraints for the variable <code>scores</code> (shape: n_classes) to represent the nonconformity scores based on the model's predictions <code>output_vars</code> for each class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">scores</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal": {"fullname": "pycfx.conformal.split_conformal", "modulename": "pycfx.conformal.split_conformal", "kind": "module", "doc": "<p>pycfx/conformal/split_conformal.py\nSplitConformalPrediction</p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction", "kind": "class", "doc": "<p>Wrapper over AbstractModel to compute vanilla (split) conformal prediction intervals</p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.__init__", "kind": "function", "doc": "<p>Initialise with model, dataset input_properties and config.\nAlter the following with the config dict: {'alpha':0.05, 'scorefn_name':'linear2', 'dim_reduction':None}\nSet save_path and use_pretrained to save and re-use calibration predictions.</p>\n\n<p>Use a custom score function by adding it to the SCOREFN_REGISTRY (see pycfx/conformal/score_fns.py)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.model", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.input_properties", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.config", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.alpha", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.scorefn_name", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.scorefn", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.dim_reduction", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pycfx.datasets.dim_reduction.DimensionalityReduction"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.is_calibrated", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.scores", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.scores", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.calib_preds", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.save_path", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.use_pretrained", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.name", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.name", "kind": "function", "doc": "<p>Get the name of this class, including specified config</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.get_scores", "kind": "function", "doc": "<p>Get nonconformity scores for calibation points (X_calib, y_calib) using the configured scorefn. If model has a save_dir, and use_pretrained=True, these scores will be saved.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.calibrate", "kind": "function", "doc": "<p>Calibrate the SplitConformalPrediction instance using calibration data (X_calib, y_calib), returns the quantile value. test_point is ignored.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">test_point</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.predict", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.predict", "kind": "function", "doc": "<p>Obtain a conformal prediction interval for a single example X</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.predict_batch", "kind": "function", "doc": "<p>Obtain conformal prediction intervals for a batch of examples X</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.gp_set_conformal_prediction_constraint", "kind": "function", "doc": "<p>Give the prediction of the model (in the output_vars MVar), add an MVar constrained to the nonconformity score of each class.\ninput_vars is unused for SplitConformalPrediction.\nReturns the scores MVar</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">input_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"fullname": "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint", "modulename": "pycfx.conformal.split_conformal", "qualname": "SplitConformalPrediction.gp_set_singleton_constraint", "kind": "function", "doc": "<p>Constrain the conformal set size to be a singleton containing the target class.</p>\n\n<p>Note: Call gp_set_conformal_prediction_constraint first to set the scores for each class.\nTODO: remove dependency on one-hot labels here.  </p>\n\n<p>Returns the singleton set size constraints. The target class can be changed by removing these constraints from the model, then calling this function again.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations": {"fullname": "pycfx.counterfactual_explanations", "modulename": "pycfx.counterfactual_explanations", "kind": "module", "doc": "<p>PyCFX Counterfactual Explanations</p>\n\n<p>Generators available:</p>\n\n<ul>\n<li>Differentiable\n<ul>\n<li><a href=\"https://arxiv.org/pdf/1711.00399\">Wachter</a></li>\n<li><a href=\"https://arxiv.org/abs/2312.10648\">ECCCo</a></li>\n<li><a href=\"https://arxiv.org/abs/2103.08951\">Schut</a>, </li>\n<li>Support for PyTorch/Keras models.</li>\n</ul></li>\n<li>MILP-based\n<ul>\n<li>Min Distance CFX, </li>\n<li>CONFEX CFXs [1]</li>\n<li>Support for PyTorch/Keras MLP and tree-based models</li>\n</ul></li>\n<li>Other: \n<ul>\n<li>Nearest-neighbour CFX,</li>\n<li>Support for all models.</li>\n</ul></li>\n<li>External: FOCUS (uses <a href=\"https://github.com/kyosek/CFXplorer\">CFXplorer</a> for implementation), FeatureTweak (implementation used from https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py), with support for SKLearn tree based classifiers.</li>\n</ul>\n"}, "pycfx.counterfactual_explanations.cf_conformal": {"fullname": "pycfx.counterfactual_explanations.cf_conformal", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/cf_conformal.py\nCompute a CFX for the model using the CONFEX approach.</p>\n"}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"fullname": "pycfx.counterfactual_explanations.cf_conformal.ConformalCF", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "qualname": "ConformalCF", "kind": "class", "doc": "<p>Compute a CFX for the model using the CONFEX approach: find the minimal distance point which has a conformal prediction set consisting of the target class only.</p>\n", "bases": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator"}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"fullname": "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "qualname": "ConformalCF.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSet save_dir and use_pregenerated to allow generators to save and reuse data.\nSpecify within the config <code>conformal_class</code>, a subtype of SplitConformalPrediction, and <code>conformal_config</code>, the config dict to pass to the <code>conformal_class</code> when initialising it.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">MILPEncodableModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"fullname": "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "qualname": "ConformalCF.conformal_class", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"fullname": "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "qualname": "ConformalCF.conformal_config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"fullname": "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "qualname": "ConformalCF.setup", "kind": "function", "doc": "<p>Provide training data (X_train, y_train) and calibration data (X_calib, y_calib) to generators to allow them to set up.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_conformal", "qualname": "ConformalCF.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_generator": {"fullname": "pycfx.counterfactual_explanations.cf_generator", "modulename": "pycfx.counterfactual_explanations.cf_generator", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/cf_generator.py\nAbstract generator for CFXs.</p>\n"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator", "kind": "class", "doc": "<p>Abstract generator for CFXs.</p>\n", "bases": "abc.ABC"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSet save_dir and use_pregenerated to allow generators to save and reuse data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.input_properties", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.save_dir", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.use_pregenerated", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.name", "kind": "function", "doc": "<p>Get the name of this generator</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.setup", "kind": "function", "doc": "<p>Provide training data (X_train, y_train) and calibration data (X_calib, y_calib) to generators to allow them to set up.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.generate_counterfactuals", "kind": "function", "doc": "<p>Generate a batch of CFXs for specified <code>x_factuals</code> and <code>y_targets</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_factuals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_targets</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"fullname": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution", "modulename": "pycfx.counterfactual_explanations.cf_generator", "qualname": "CounterfactualGenerator.check_solution", "kind": "function", "doc": "<p>Check a pertubation distance <code>pert_distance</code> in every dimension to check if (due to numerical issues) the CFX (<code>input_mvar</code>) is on the decision boundary but not allocated to the target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">pert_distance</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_gradient_based": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/cf_gradient_based.py\nGradient based CFX generators.</p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator", "kind": "class", "doc": "<p>Abstract gradient based generator</p>\n", "bases": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSet config's <code>norm</code>, <code>dist_weight</code>, <code>mad</code> to specify distance computations.\nSet <code>n_iter</code>, learning rate <code>lr</code>, and <code>min_max_lambda</code> (for Wachter) as optimisation loop parameters.</p>\n\n<p>Set save_dir and use_pregenerated to allow generators to save and reuse data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">DifferentiableModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.norm", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.dist_weight", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.mad", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.n_iter", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.lr", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.min_max_lambda", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "GradientBasedGenerator.backend", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "WachterGenerator", "kind": "class", "doc": "<p>Wachter et. al. \"Counterfactual explanations without opening the black box: Automated decisions and the GDPR.\" (2017)</p>\n", "bases": "GradientBasedGenerator"}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "WachterGenerator.setup", "kind": "function", "doc": "<p>Provide training data (X_train, y_train) and calibration data (X_calib, y_calib) to generators to allow them to set up.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "WachterGenerator.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "ECCCOGenerator", "kind": "class", "doc": "<p>ECCCo: Altmeyer et al. \"Faithful model explanations through energy-constrained conformal counterfactuals.\" (2024)</p>\n", "bases": "GradientBasedGenerator"}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "ECCCOGenerator.setup", "kind": "function", "doc": "<p>Provide training data (X_train, y_train) and calibration data (X_calib, y_calib) to generators to allow them to set up.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "ECCCOGenerator.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "SchutGenerator", "kind": "class", "doc": "<p>Schut et al. \"Generating interpretable counterfactual explanations by implicit minimisation of epistemic and aleatoric uncertainties.\" (2021).\nNote: Schut takes an ensemble of models.</p>\n", "bases": "GradientBasedGenerator"}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "SchutGenerator.setup", "kind": "function", "doc": "<p>Provide training data (X_train, y_train) and calibration data (X_calib, y_calib) to generators to allow them to set up.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_gradient_based", "qualname": "SchutGenerator.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_mindist": {"fullname": "pycfx.counterfactual_explanations.cf_mindist", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/cf_mindist.py\nCompute the minimal distance CFX using MILP.</p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF", "kind": "class", "doc": "<p>MinDistanceCF: Compute the minimal distance CFX using MILP.</p>\n", "bases": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSet save_dir and use_pregenerated to allow generators to save and reuse data.\nAlter config \"db_distance\" for to alter threshold for logits to be assignment to the target class.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">MILPEncodableModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.db_distance", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.grb_model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.output_vars", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.clf_constraints", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.distance_vars", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.distance_constrs", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_mindist", "qualname": "MinDistanceCF.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"fullname": "pycfx.counterfactual_explanations.cf_nearestneighbour", "modulename": "pycfx.counterfactual_explanations.cf_nearestneighbour", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/cf_nearestneighbour.py\nNearest Neighbour Counterfactual Explanation</p>\n"}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"fullname": "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF", "modulename": "pycfx.counterfactual_explanations.cf_nearestneighbour", "qualname": "NearestNeighbourCF", "kind": "class", "doc": "<p>NearestNeighbourCF: Return the nearest training point of the target class to the factual instance as the CFX.</p>\n", "bases": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator"}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"fullname": "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__", "modulename": "pycfx.counterfactual_explanations.cf_nearestneighbour", "qualname": "NearestNeighbourCF.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSet save_dir and use_pregenerated to allow generators to save and reuse data.\nAlter config \"ord\" to specify the norm used in the distance computation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"fullname": "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord", "modulename": "pycfx.counterfactual_explanations.cf_nearestneighbour", "qualname": "NearestNeighbourCF.ord", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"fullname": "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup", "modulename": "pycfx.counterfactual_explanations.cf_nearestneighbour", "qualname": "NearestNeighbourCF.setup", "kind": "function", "doc": "<p>Provide training data (X_train, y_train) and calibration data (X_calib, y_calib) to generators to allow them to set up.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.cf_nearestneighbour", "qualname": "NearestNeighbourCF.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable": {"fullname": "pycfx.counterfactual_explanations.differentiable", "modulename": "pycfx.counterfactual_explanations.differentiable", "kind": "module", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/differentiable/losses.py\nLosses for use by GradientBasedGenerator</p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "LOSSES_REGISTRY", "kind": "variable", "doc": "<p></p>\n", "default_value": "defaultdict(&lt;class &#x27;dict&#x27;&gt;, {&lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss&#x27;&gt;: {None: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses._ClassificationLoss&#x27;&gt;}, &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss&#x27;&gt;: {&#x27;pytorch&#x27;: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses._DistanceLossPyTorch&#x27;&gt;, &#x27;tensorflow&#x27;: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses._DistanceLossTensorFlow&#x27;&gt;}, &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss&#x27;&gt;: {&#x27;pytorch&#x27;: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses._EnergyLossPyTorch&#x27;&gt;, &#x27;tensorflow&#x27;: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.losses._EnergyLossTensorFlow&#x27;&gt;}, &lt;class &#x27;pycfx.conformal.losses_conformal.SetSizeLoss&#x27;&gt;: {&#x27;pytorch&#x27;: &lt;class &#x27;pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch&#x27;&gt;, &#x27;tensorflow&#x27;: &lt;class &#x27;pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow&#x27;&gt;}})"}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.register_loss", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "register_loss", "kind": "function", "doc": "<p>Decorator to register this class as an implemenation of the loss <code>base_cls</code> for backend <code>backend</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_cls</span>, </span><span class=\"param\"><span class=\"n\">backend</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "get_loss_with_backend", "kind": "function", "doc": "<p>Get the implemenation of the loss specified by <code>base_cls</code> with the backend <code>backend_name</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_cls</span>, </span><span class=\"param\"><span class=\"n\">backend_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.Loss", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "Loss", "kind": "class", "doc": "<p>Base class that dispatches to the backend-specific Loss subclass.</p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "Loss.loss", "kind": "function", "doc": "<p>Obtain the loss tensor, specifiying an optimisation state <code>opt_state</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">opt_state</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">counterfactual_explanations</span><span class=\"o\">.</span><span class=\"n\">differentiable</span><span class=\"o\">.</span><span class=\"n\">optimisation_loop</span><span class=\"o\">.</span><span class=\"n\">OptimisationState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "ClassificationLoss", "kind": "class", "doc": "<p>Get the model's classification loss between the target class and current prediction.</p>\n", "bases": "Loss"}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "DistanceLoss", "kind": "class", "doc": "<p>Get the distance loss between the factual instance and counterfactual instance.\nUses the L-<code>norm</code> distance, specify <code>mad</code> and <code>mad_data</code> to use the median absolute deviation, specify <code>dist_weight</code> for a custom weighted distance</p>\n", "bases": "Loss, abc.ABC"}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "DistanceLoss.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">norm</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mad</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mad_data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dist_weight</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "DistanceLoss.norm", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "DistanceLoss.mad", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "DistanceLoss.dist_weight", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "EnergyLoss", "kind": "class", "doc": "<p>Get the (decayed) energy loss for the obtained counterfactual instance\nUsed in ECCCo from Altmeyer et al. \"Faithful model explanations through energy-constrained conformal counterfactuals.\" (2024)\nImplementation ported from <a href=\"https://github.com/pat-alt/ECCCo.jl/blob/main/pycfx/penalties.jl\">https://github.com/pat-alt/ECCCo.jl/blob/main/pycfx/penalties.jl</a></p>\n", "bases": "Loss"}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "EnergyLoss.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reg_strength</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span>, </span><span class=\"param\"><span class=\"n\">decay</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.9</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "EnergyLoss.decay", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"fullname": "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength", "modulename": "pycfx.counterfactual_explanations.differentiable.losses", "qualname": "EnergyLoss.reg_strength", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/differentiable/optimisation_pytorch.py\nKeras implemenation of a DifferentiableOptimisation loop.</p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "SalientFeatureOptimizer_TensorFlow", "kind": "class", "doc": "<p>TensorFlow implementation of the JSMA-like optimiser used by Schut et al. \"Generating interpretable counterfactual explanations by implicit minimisation of epistemic and aleatoric uncertainties.\" (2021).</p>\n", "bases": "keras.src.optimizers.optimizer.Optimizer"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "SalientFeatureOptimizer_TensorFlow.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;SalientFeatureOptimizer&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "SalientFeatureOptimizer_TensorFlow.update_step", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grad</span>, </span><span class=\"param\"><span class=\"n\">var</span>, </span><span class=\"param\"><span class=\"n\">lr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation", "kind": "class", "doc": "<p>Abstract class to define an optimisation loop for generating CFXs.\nDispatches to the backend-specific optimisation loop, according to the model.</p>\n", "bases": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation.get_model_prediction", "kind": "function", "doc": "<p>Helper to obtain the prediction for a single example x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation.setup", "kind": "function", "doc": "<p>Helper to return the torch <code>device</code>, <code>optimiser</code>, and initial <code>opt_state</code> based on <code>x_factual</code> and <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_factual</span>, </span><span class=\"param\"><span class=\"n\">y_target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation.is_correct_classification", "kind": "function", "doc": "<p>Helper to check whether the prediction of the datapoint being optimised is a valid CFX, i.e. it predicts the target class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y_enc</span>, </span><span class=\"param\"><span class=\"n\">y_target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation.fix_encoding", "kind": "function", "doc": "<p>Helper to fix the encoding of the optimised datapoint to be within bounds, or a valid categorically or ordinally encoded variable. \nIf a latent space is used for the optimisation, no change is made to x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation.optimise_min", "kind": "function", "doc": "<p>Find a CFX for the given factual <code>x</code> and target <code>y_target</code>, by minimising the loss functions specified at initialisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y_target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_keras", "qualname": "KerasMLP_Optimisation.optimise_minmax", "kind": "function", "doc": "<p>Find a CFX for the given factual <code>x</code> and target <code>y_target</code>, by maximising the element of the loss function and minimising all others, governed by the <code>min_max_lambda</code> specified at initialisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y_target</span>, </span><span class=\"param\"><span class=\"n\">n_it_outer</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/differentiable/optimisation_loop.py\nOptimisation loops to allow a CFX to be obtained by minimising specified losses and using gradient descent.</p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OPTIMISATION_LOOPS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;pytorch&#x27;: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation&#x27;&gt;, &#x27;tensorflow&#x27;: &lt;class &#x27;pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation&#x27;&gt;}"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "register_optimisation_loop", "kind": "function", "doc": "<p>Decorator to add an optimisation loop implementation for backend <code>backend</code> to registry</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">backend</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation", "kind": "class", "doc": "<p>Abstract class to define an optimisation loop for generating CFXs.\nDispatches to the backend-specific optimisation loop, according to the model.</p>\n", "bases": "abc.ABC"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.__init__", "kind": "function", "doc": "<p>Initialise an optimisation loop with <code>model</code>, dataset <code>input_properties</code>, list of Loss instances <code>losses</code>, max number of iterations <code>n_iter</code>,\nlearning rate for optimiser <code>lr</code>, <code>min_max_lambda</code> for min-max optimisation, weights for losses <code>losses_weights</code>, latent encoding <code>latent_encoding</code>, whether to use salient feature optimiser <code>jsma</code>,\nwhether to stop early if no change is detected in the CFX <code>early_stopping</code>, and whether to retain the graph in backwards autograd (Torch-specific)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span>,</span><span class=\"param\">\t<span class=\"n\">losses</span>,</span><span class=\"param\">\t<span class=\"n\">n_iter</span>,</span><span class=\"param\">\t<span class=\"n\">lr</span>,</span><span class=\"param\">\t<span class=\"n\">min_max_lambda</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">losses_weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latent_encoding</span><span class=\"o\">=&lt;</span><span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">latent_encodings</span><span class=\"o\">.</span><span class=\"n\">IdentityEncoding</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">jsma</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">early_stopping</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">retain_graph</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.input_properties", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.losses", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.n_iter", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.lr", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.early_stopping", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.min_max_lambda", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.losses_weights", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.latent_encoding", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.retain_graph", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.jsma", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.tensor_bounds", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.optimise_minmax", "kind": "function", "doc": "<p>Find a CFX for the given factual <code>x</code> and target <code>y_target</code>, by maximising the element of the loss function and minimising all others, governed by the <code>min_max_lambda</code> specified at initialisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "DifferentiableOptimisation.optimise_min", "kind": "function", "doc": "<p>Find a CFX for the given factual <code>x</code> and target <code>y_target</code>, by minimising the loss functions specified at initialisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState", "kind": "class", "doc": "<p>Dataclass for the optimisation state.</p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">DifferentiableModel</span>,</span><span class=\"param\">\t<span class=\"n\">z</span>,</span><span class=\"param\">\t<span class=\"n\">z_factual</span>,</span><span class=\"param\">\t<span class=\"n\">x_enc</span>,</span><span class=\"param\">\t<span class=\"n\">y_enc</span>,</span><span class=\"param\">\t<span class=\"n\">x_factual</span>,</span><span class=\"param\">\t<span class=\"n\">y_factual</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span>,</span><span class=\"param\">\t<span class=\"n\">it</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">n_it</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.z", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.z_factual", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.x_enc", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.y_enc", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.x_factual", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.y_factual", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.y_target", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.it", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_loop", "qualname": "OptimisationState.n_it", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/differentiable/optimisation_pytorch.py\nPyTorch implemenation of a DifferentiableOptimisation loop.</p>\n"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "SalientFeatureOptimizer", "kind": "class", "doc": "<p>PyTorch implementation of the JSMA-like optimiser used by Schut et al. \"Generating interpretable counterfactual explanations by implicit minimisation of epistemic and aleatoric uncertainties.\" (2021).</p>\n", "bases": "torch.optim.optimizer.Optimizer"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "SalientFeatureOptimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">params</span>, </span><span class=\"param\"><span class=\"n\">lr</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span>)</span>"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "SalientFeatureOptimizer.step", "kind": "function", "doc": "<p>Perform a single optimization step to update parameter.</p>\n\n<p>Args:\n    closure (Callable): A closure that reevaluates the model and\n        returns the loss. Optional for most optimizers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">closure</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "PyTorchMLP_Optimisation", "kind": "class", "doc": "<p>Abstract class to define an optimisation loop for generating CFXs.\nDispatches to the backend-specific optimisation loop, according to the model.</p>\n", "bases": "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "PyTorchMLP_Optimisation.setup", "kind": "function", "doc": "<p>Helper to return the torch <code>device</code>, <code>optimiser</code>, and initial <code>opt_state</code> based on <code>x_factual</code> and <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_factual</span>, </span><span class=\"param\"><span class=\"n\">y_target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "PyTorchMLP_Optimisation.is_correct_classification", "kind": "function", "doc": "<p>Helper to check whether the prediction of the datapoint being optimised is a valid CFX, i.e. it predicts the target class</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y_enc</span>, </span><span class=\"param\"><span class=\"n\">y_target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "PyTorchMLP_Optimisation.fix_encoding", "kind": "function", "doc": "<p>Helper to fix the encoding of the optimised datapoint to be within bounds, or a valid categorically or ordinally encoded variable. \nIf a latent space is used for the optimisation, no change is made to x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "PyTorchMLP_Optimisation.optimise_minmax", "kind": "function", "doc": "<p>Find a CFX for the given factual <code>x</code> and target <code>y_target</code>, by maximising the element of the loss function and minimising all others, governed by the <code>min_max_lambda</code> specified at initialisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y_target</span>, </span><span class=\"param\"><span class=\"n\">n_it_outer</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"fullname": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min", "modulename": "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch", "qualname": "PyTorchMLP_Optimisation.optimise_min", "kind": "function", "doc": "<p>Find a CFX for the given factual <code>x</code> and target <code>y_target</code>, by minimising the loss functions specified at initialisation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y_target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.external": {"fullname": "pycfx.counterfactual_explanations.external", "modulename": "pycfx.counterfactual_explanations.external", "kind": "module", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/external/cf_featuretweak.py\nWrapper over existing implementation of FeatureTweak from <a href=\"https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py\">https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py</a></p>\n"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "distance_cost_l1", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "distance_cost_l2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "FeatureTweakGenerator", "kind": "class", "doc": "<p>Wrapper over existing implementation of FeatureTweak from <a href=\"https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py\">https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py</a></p>\n", "bases": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "FeatureTweakGenerator.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSpecify within the config <code>cost_fn</code> any distance function between two arrays, two of which can be imported from cf_featuretweak. Additionally an epsilon value, default 0.1.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">randomforest_sklearn</span><span class=\"o\">.</span><span class=\"n\">RandomForestSKLearn</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "FeatureTweakGenerator.epsilon", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "FeatureTweakGenerator.cost_fn", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.external.cf_featuretweak", "qualname": "FeatureTweakGenerator.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.external.cf_focus": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "kind": "module", "doc": "<p>pycfx/counterfactual_explanations/external/cf_focus.py\nWrapper over existing implementation of FOCUS, from the CFXplorer library. See <a href=\"https://github.com/kyosek/CFXplorer\">https://github.com/kyosek/CFXplorer</a></p>\n"}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "qualname": "FOCUSGenerator", "kind": "class", "doc": "<p>Wrapper over existing implementation of FOCUS, from the CFXplorer library. See <a href=\"https://github.com/kyosek/CFXplorer\">https://github.com/kyosek/CFXplorer</a></p>\n", "bases": "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator"}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "qualname": "FOCUSGenerator.__init__", "kind": "function", "doc": "<p>Initialise with <code>model</code>, dataset <code>input_properties</code> and config dict.\nSpecify within the config <code>distance_func</code> from \"euclidean\", \"cosine\", \"l1\" and \"mahalabobis\". Also specifiy <code>n_iter</code>, default 100.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">randomforest_sklearn</span><span class=\"o\">.</span><span class=\"n\">RandomForestSKLearn</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;.&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">use_pregenerated</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "qualname": "FOCUSGenerator.distance_func", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "qualname": "FOCUSGenerator.n_iter", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "qualname": "FOCUSGenerator.generate_counterfactual", "kind": "function", "doc": "<p>Generate and return a counterfactual instance for factual instance <code>x</code> and target class <code>y_target</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"fullname": "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals", "modulename": "pycfx.counterfactual_explanations.external.cf_focus", "qualname": "FOCUSGenerator.generate_counterfactuals", "kind": "function", "doc": "<p>Generate a batch of CFXs for specified <code>x_factuals</code> and <code>y_targets</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x_factuals</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_targets</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets": {"fullname": "pycfx.datasets", "modulename": "pycfx.datasets", "kind": "module", "doc": "<p>PyCFX Datasets</p>\n\n<p>Datasets overview:</p>\n\n<ul>\n<li><code>CaliforniaHousing</code> \u2014 Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions, Statistics and Probability Letters, 33 (1997) 291-297</li>\n<li><code>GermanCredit</code> \u2014 Hofmann, H. (1994). Statlog (German Credit Data) [Dataset]. UCI Machine Learning Repository. <a href=\"https://doi.org/10.24432/C5NC77\">https://doi.org/10.24432/C5NC77</a>.</li>\n<li><code>GiveMeSomeCredit</code> - Credit Fusion and Will Cukierski. Give Me Some Credit. <a href=\"https://kaggle.com/competitions/GiveMeSomeCredit\">https://kaggle.com/competitions/GiveMeSomeCredit</a>, 2011. Kaggle.</li>\n<li><code>AdultIncome</code> \u2014 Becker, B. &amp; Kohavi, R. (1996). Adult [Dataset]. UCI Machine Learning Repository. <a href=\"https://doi.org/10.24432/C5XW20\">https://doi.org/10.24432/C5XW20</a>.</li>\n<li>Synthetic models\n<ul>\n<li><code>SyntheticLinearlySeparable</code></li>\n<li><code>SyntheticMulticlass</code></li>\n<li><code>SyntheticMoons</code></li>\n<li><code>SyntheticBimodal</code></li>\n</ul></li>\n</ul>\n\n<ul>\n<li>Each dataset has corresponding metadata in an <code>InputProperties</code> object, and dimensionality reduction utilities are also included.</li>\n</ul>\n"}, "pycfx.datasets.datasets": {"fullname": "pycfx.datasets.datasets", "modulename": "pycfx.datasets.datasets", "kind": "module", "doc": "<p>pycfx/datasets/datasets.py\nBase Dataset class and included some included datasets</p>\n"}, "pycfx.datasets.datasets.RANDOM_STATE": {"fullname": "pycfx.datasets.datasets.RANDOM_STATE", "modulename": "pycfx.datasets.datasets", "qualname": "RANDOM_STATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "2"}, "pycfx.datasets.datasets.Dataset": {"fullname": "pycfx.datasets.datasets.Dataset", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset", "kind": "class", "doc": "<p>Base class representing a dataset.\nNote: this class could probably be split into a Dataset class, which defines the dataset and a SplitDataset data class, which provides easy access to a specified train-calib-test split.</p>\n", "bases": "abc.ABC"}, "pycfx.datasets.datasets.Dataset.__init__": {"fullname": "pycfx.datasets.datasets.Dataset.__init__", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.__init__", "kind": "function", "doc": "<p>Initialise a dataset with a specified train-calib-test proportion, and optimal kwargs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">train_prop</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">calib_prop</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">test_prop</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, "pycfx.datasets.datasets.Dataset.define_dataset": {"fullname": "pycfx.datasets.datasets.Dataset.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.get_X_y": {"fullname": "pycfx.datasets.datasets.Dataset.get_X_y", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.get_X_y", "kind": "function", "doc": "<p>Get the samples X and labels y of the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"fullname": "pycfx.datasets.datasets.Dataset.get_input_properties", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.get_input_properties", "kind": "function", "doc": "<p>Get the InputProperties of the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.get_name": {"fullname": "pycfx.datasets.datasets.Dataset.get_name", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.get_name", "kind": "function", "doc": "<p>Get the name of the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"fullname": "pycfx.datasets.datasets.Dataset.get_X_y_split", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.get_X_y_split", "kind": "function", "doc": "<p>Get the split training, calibration and test data of the dataset:\nReturns (X_train, y_train, X_calib, y_calib, X_test, y_test)</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"fullname": "pycfx.datasets.datasets.Dataset.median_pairwise_distances", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.median_pairwise_distances", "kind": "function", "doc": "<p>Helper to obtain the median pairwise distance of all elements in the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"fullname": "pycfx.datasets.datasets.Dataset.sample_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.sample_dataset", "kind": "function", "doc": "<p>Helper to randomly sample <code>n</code> points from the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"fullname": "pycfx.datasets.datasets.Dataset.sample_test_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.sample_test_dataset", "kind": "function", "doc": "<p>Helper to randomly sample <code>n</code> points from the dataset's test split</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"fullname": "pycfx.datasets.datasets.Dataset.compute_radius_from_budget", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.compute_radius_from_budget", "kind": "function", "doc": "<p>Helper to compute a radius of a hypersphere with volume corresponding to a <code>budget</code>-proportion of the full feature space.\nUses InputProperties ranges for features if available, or observed ranges from the dataset if not to obtain the feature space volume.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">budget</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"fullname": "pycfx.datasets.datasets.Dataset.sample_neighbours", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.sample_neighbours", "kind": "function", "doc": "<p>Obtain <code>n_samples</code> samples of points around <code>point</code> with budget <code>budget</code> and a random seed <code>seed</code>.\nPoints are sampled uniformly from a hypersphere with volume corresponding to a <code>budget</code>-proportion of the full feature space.\nSet <code>use_budget</code> to False to have <code>budget</code> directly represent the radius to use.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">point</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">budget</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">use_budget</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"fullname": "pycfx.datasets.datasets.Dataset.set_split_indicies", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.set_split_indicies", "kind": "function", "doc": "<p>Set the train-calibration-test split.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">train_prop</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">test_prop</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">calib_prop</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"fullname": "pycfx.datasets.datasets.Dataset.get_ord_bounds", "modulename": "pycfx.datasets.datasets", "qualname": "Dataset.get_ord_bounds", "kind": "function", "doc": "<p>Helper to get the possible values a possible ordinal feature <code>key</code> can hold, through observation in <code>df</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"fullname": "pycfx.datasets.datasets.SyntheticLinearlySeparable", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticLinearlySeparable", "kind": "class", "doc": "<p>Synthetic Linearly Separable (SKLearn)</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"fullname": "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticLinearlySeparable.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.SyntheticMoons": {"fullname": "pycfx.datasets.datasets.SyntheticMoons", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticMoons", "kind": "class", "doc": "<p>Synthetic Moons (SKLearn)</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"fullname": "pycfx.datasets.datasets.SyntheticMoons.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticMoons.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.SyntheticMulticlass": {"fullname": "pycfx.datasets.datasets.SyntheticMulticlass", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticMulticlass", "kind": "class", "doc": "<p>Synthetic Multiclass (SKLearn)</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"fullname": "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticMulticlass.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.SyntheticBimodal": {"fullname": "pycfx.datasets.datasets.SyntheticBimodal", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticBimodal", "kind": "class", "doc": "<p>Synthetic Bimodal (inspired from Figure 1 in Poyiadzi et al. \"FACE: feasible and actionable counterfactual explanations.\" 2020.)\nSet kwargs 'size' to increase the number of points in the dataset.</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"fullname": "pycfx.datasets.datasets.SyntheticBimodal.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "SyntheticBimodal.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.GermanCredit": {"fullname": "pycfx.datasets.datasets.GermanCredit", "modulename": "pycfx.datasets.datasets", "qualname": "GermanCredit", "kind": "class", "doc": "<p>GermanCredit dataset: Hofmann, H. (1994). Statlog (German Credit Data) [Dataset]. UCI Machine Learning Repository. <a href=\"https://doi.org/10.24432/C5NC77\">https://doi.org/10.24432/C5NC77</a>.\nCleaned version obtained via Kaggle <a href=\"https://www.kaggle.com/datasets/uciml/german-credit/data\">https://www.kaggle.com/datasets/uciml/german-credit/data</a>\nNumeric 'Age','Credit amount', 'Duration'  scaled to (0, 1) with MinMax scaler\nOrdinal encoded job, saving account, checking account and categorically encoded Purpose</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"fullname": "pycfx.datasets.datasets.GermanCredit.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "GermanCredit.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.GermanCreditv2": {"fullname": "pycfx.datasets.datasets.GermanCreditv2", "modulename": "pycfx.datasets.datasets", "qualname": "GermanCreditv2", "kind": "class", "doc": "<p>GermanCredit dataset: Hofmann, H. (1994). Statlog (German Credit Data) [Dataset]. UCI Machine Learning Repository. <a href=\"https://doi.org/10.24432/C5NC77\">https://doi.org/10.24432/C5NC77</a>.\nCleaned version obtained via Kaggle <a href=\"https://www.kaggle.com/datasets/uciml/german-credit/data\">https://www.kaggle.com/datasets/uciml/german-credit/data</a>\nNumeric 'Age','Credit amount', 'Duration'  scaled to (0, 1) with MinMax scaler\nOrdinal encoded job, saving account, checking account.\nVariant without categorically encoded Purpose.</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"fullname": "pycfx.datasets.datasets.GermanCreditv2.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "GermanCreditv2.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"fullname": "pycfx.datasets.datasets.GiveMeSomeCredit", "modulename": "pycfx.datasets.datasets", "qualname": "GiveMeSomeCredit", "kind": "class", "doc": "<p>GiveMeSomeCredit dataset: Credit Fusion and Will Cukierski. Give Me Some Credit. <a href=\"https://kaggle.com/competitions/GiveMeSomeCredit\">https://kaggle.com/competitions/GiveMeSomeCredit</a>, 2011. Kaggle.\nObtained via Kaggle <a href=\"https://www.kaggle.com/competitions/GiveMeSomeCredit\">https://www.kaggle.com/competitions/GiveMeSomeCredit</a>\n8 Numeric features scaled to (0, 1) with MinMax scaler</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"fullname": "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "GiveMeSomeCredit.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.CaliforniaHousing": {"fullname": "pycfx.datasets.datasets.CaliforniaHousing", "modulename": "pycfx.datasets.datasets", "qualname": "CaliforniaHousing", "kind": "class", "doc": "<p>CaliforniaHousing dataset: Pace, R. Kelley and Ronald Barry, Sparse Spatial Autoregressions, Statistics and Probability Letters, 33 (1997) 291-297\nObtained from the StatLib repository via SKLearn sklearn.datasets.fetch_california_housing <a href=\"https://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html\">https://www.dcc.fc.up.pt/~ltorgo/Regression/cal_housing.html</a>\n8 Numeric features scaled to (0, 1) with MinMax scaler\nThe regression problem was converted to classification of houses with income above 20000 (42% above, 58% below)</p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"fullname": "pycfx.datasets.datasets.CaliforniaHousing.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "CaliforniaHousing.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.datasets.AdultIncome": {"fullname": "pycfx.datasets.datasets.AdultIncome", "modulename": "pycfx.datasets.datasets", "qualname": "AdultIncome", "kind": "class", "doc": "<p>AdultIncome dataset: Becker, B. &amp; Kohavi, R. (1996). Adult [Dataset]. UCI Machine Learning Repository. <a href=\"https://doi.org/10.24432/C5XW20\">https://doi.org/10.24432/C5XW20</a>.\nSee <a href=\"https://www.cs.toronto.edu/~delve/data/adult/adultDetail.html\">https://www.cs.toronto.edu/~delve/data/adult/adultDetail.html</a>\nObtained via Kaggle <a href=\"https://www.kaggle.com/datasets/wenruliu/adult-income-dataset\">https://www.kaggle.com/datasets/wenruliu/adult-income-dataset</a></p>\n", "bases": "Dataset"}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"fullname": "pycfx.datasets.datasets.AdultIncome.define_dataset", "modulename": "pycfx.datasets.datasets", "qualname": "AdultIncome.define_dataset", "kind": "function", "doc": "<p>Subclasses override this method to return an array of samples X, labels y and InputProperties instance which describes the dataset</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction": {"fullname": "pycfx.datasets.dim_reduction", "modulename": "pycfx.datasets.dim_reduction", "kind": "module", "doc": "<p>pycfx/datasets/dim_reduction.py\nDimensionality Reduction, intended for use with the localised conformal prediction methods</p>\n"}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction", "kind": "class", "doc": "<p>Abstract DimensionalityReduction instance</p>\n", "bases": "abc.ABC"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.__init__", "kind": "function", "doc": "<p>Specify <code>target_dim</code>, dimension of the space in which points are encoded</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target_dim</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.target_dim", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.setup", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.setup", "kind": "function", "doc": "<p>Setup the dim reduction instance by providing a <code>model</code>, dataset <code>input_properties</code>, training data (X_train, y_train).\nSet save_dir and use_pretrained to allow this instance to save and re-use computation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.encode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.encode", "kind": "function", "doc": "<p>Encode x into the reduced dimensional space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.decode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.decode", "kind": "function", "doc": "<p>(Optional) Reverse the encoding of an encoded X</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.name", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.name", "kind": "function", "doc": "<p>Obtain the name of the dimensionality reduction method</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.gp_dim_encoding", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the encoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"fullname": "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "DimensionalityReduction.gp_dim_decoding", "kind": "function", "doc": "<p>(Optional) Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the decoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.PCADimReduction": {"fullname": "pycfx.datasets.dim_reduction.PCADimReduction", "modulename": "pycfx.datasets.dim_reduction", "qualname": "PCADimReduction", "kind": "class", "doc": "<p>PCA dim encoding</p>\n", "bases": "DimensionalityReduction"}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"fullname": "pycfx.datasets.dim_reduction.PCADimReduction.setup", "modulename": "pycfx.datasets.dim_reduction", "qualname": "PCADimReduction.setup", "kind": "function", "doc": "<p>Setup the dim reduction instance by providing a <code>model</code>, dataset <code>input_properties</code>, training data (X_train, y_train).\nSet save_dir and use_pretrained to allow this instance to save and re-use computation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"fullname": "pycfx.datasets.dim_reduction.PCADimReduction.encode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "PCADimReduction.encode", "kind": "function", "doc": "<p>Encode x into the reduced dimensional space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"fullname": "pycfx.datasets.dim_reduction.PCADimReduction.decode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "PCADimReduction.decode", "kind": "function", "doc": "<p>(Optional) Reverse the encoding of an encoded X</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"fullname": "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "PCADimReduction.gp_dim_encoding", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the encoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"fullname": "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "PCADimReduction.gp_dim_decoding", "kind": "function", "doc": "<p>(Optional) Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the decoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.LDADimReduction": {"fullname": "pycfx.datasets.dim_reduction.LDADimReduction", "modulename": "pycfx.datasets.dim_reduction", "qualname": "LDADimReduction", "kind": "class", "doc": "<p>LDA dim encoding</p>\n", "bases": "DimensionalityReduction"}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"fullname": "pycfx.datasets.dim_reduction.LDADimReduction.setup", "modulename": "pycfx.datasets.dim_reduction", "qualname": "LDADimReduction.setup", "kind": "function", "doc": "<p>Setup the dim reduction instance by providing a <code>model</code>, dataset <code>input_properties</code>, training data (X_train, y_train).\nSet save_dir and use_pretrained to allow this instance to save and re-use computation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"fullname": "pycfx.datasets.dim_reduction.LDADimReduction.encode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "LDADimReduction.encode", "kind": "function", "doc": "<p>Encode x into the reduced dimensional space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"fullname": "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "LDADimReduction.gp_dim_encoding", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the encoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"fullname": "pycfx.datasets.dim_reduction.SecondLastLayerReduction", "modulename": "pycfx.datasets.dim_reduction", "qualname": "SecondLastLayerReduction", "kind": "class", "doc": "<p>Use the outputs second-last layer of the trained <code>model</code> provided in .setup() as the encoding. E.g. see <a href=\"https://arxiv.org/pdf/2206.13092\">https://arxiv.org/pdf/2206.13092</a></p>\n", "bases": "DimensionalityReduction"}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"fullname": "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup", "modulename": "pycfx.datasets.dim_reduction", "qualname": "SecondLastLayerReduction.setup", "kind": "function", "doc": "<p>Setup the dim reduction instance by providing a <code>model</code>, dataset <code>input_properties</code>, training data (X_train, y_train).\nSet save_dir and use_pretrained to allow this instance to save and re-use computation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"fullname": "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "SecondLastLayerReduction.encode", "kind": "function", "doc": "<p>Encode x into the reduced dimensional space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"fullname": "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "SecondLastLayerReduction.gp_dim_encoding", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the encoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"fullname": "pycfx.datasets.dim_reduction.AutoencoderDimReduction", "modulename": "pycfx.datasets.dim_reduction", "qualname": "AutoencoderDimReduction", "kind": "class", "doc": "<p>Use an autoencoder for dimensionality reduction. Best for handling mixed features.</p>\n", "bases": "DimensionalityReduction"}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"fullname": "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup", "modulename": "pycfx.datasets.dim_reduction", "qualname": "AutoencoderDimReduction.setup", "kind": "function", "doc": "<p>Setup the dim reduction instance by providing a <code>model</code>, dataset <code>input_properties</code>, training data (X_train, y_train).\nSet save_dir and use_pretrained to allow this instance to save and re-use computation.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">abstract_model</span><span class=\"o\">.</span><span class=\"n\">AbstractModel</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"fullname": "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "AutoencoderDimReduction.encode", "kind": "function", "doc": "<p>Encode x into the reduced dimensional space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"fullname": "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode", "modulename": "pycfx.datasets.dim_reduction", "qualname": "AutoencoderDimReduction.decode", "kind": "function", "doc": "<p>(Optional) Reverse the encoding of an encoded X</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"fullname": "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "AutoencoderDimReduction.gp_dim_encoding", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the encoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"fullname": "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding", "modulename": "pycfx.datasets.dim_reduction", "qualname": "AutoencoderDimReduction.gp_dim_decoding", "kind": "function", "doc": "<p>(Optional) Given a <code>grb_model</code> and an MVar <code>X</code>, return a new MVar constrained to the decoding of <code>X</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.datasets.input_properties": {"fullname": "pycfx.datasets.input_properties", "modulename": "pycfx.datasets.input_properties", "kind": "module", "doc": "<p>pycfx/datasets/input_properties.py\nInputProperties: Information about a dataset</p>\n"}, "pycfx.datasets.input_properties.InputProperties": {"fullname": "pycfx.datasets.input_properties.InputProperties", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties", "kind": "class", "doc": "<p>Information about a dataset</p>\n"}, "pycfx.datasets.input_properties.InputProperties.__init__": {"fullname": "pycfx.datasets.input_properties.InputProperties.__init__", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.__init__", "kind": "function", "doc": "<p>Initialise with a list of feature names, each of which has a corresponding feature class (categorical, ordinal, numeric, ordinal_normalised).\nSpecify bounds for each: None for categorical, (min, max) for numeric, or a set of valid values for ordinal features.\nSpecify the number of labels in <code>n_targets</code>, and whether these are onehot in <code>y_onehot</code>. \nSpecify indices of categorical features in categorical_groups. If not specified, these will be inferred from the feature names. \nIn this case, eature names with a common suffix followed by a _ will be treated as part of the same categorical group</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feature_names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">feature_classes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;categorical&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ordinal&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;numeric&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;ordinal_normalised&#39;</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]</span>,</span><span class=\"param\">\t<span class=\"n\">n_targets</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">categorical_groups</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]],</span> <span class=\"n\">Literal</span><span class=\"p\">[</span><span class=\"s1\">&#39;auto&#39;</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;auto&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">y_onehot</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"fullname": "pycfx.datasets.input_properties.InputProperties.n_targets", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.n_targets", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"fullname": "pycfx.datasets.input_properties.InputProperties.feature_names", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.feature_names", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"fullname": "pycfx.datasets.input_properties.InputProperties.feature_classes", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.feature_classes", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.n_features": {"fullname": "pycfx.datasets.input_properties.InputProperties.n_features", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.n_features", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.bound": {"fullname": "pycfx.datasets.input_properties.InputProperties.bound", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.bound", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"fullname": "pycfx.datasets.input_properties.InputProperties.y_onehot", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.y_onehot", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"fullname": "pycfx.datasets.input_properties.InputProperties.n_distinct_features", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.n_distinct_features", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"fullname": "pycfx.datasets.input_properties.InputProperties.all_idx", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.all_idx", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"fullname": "pycfx.datasets.input_properties.InputProperties.get_feature_details", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.get_feature_details", "kind": "function", "doc": "<p>Get a list of the feature details: name, class and bounds for each feature</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"fullname": "pycfx.datasets.input_properties.InputProperties.get_labels", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.get_labels", "kind": "function", "doc": "<p>Get a list of dataset labels</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"fullname": "pycfx.datasets.input_properties.InputProperties.check_valid_instance", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.check_valid_instance", "kind": "function", "doc": "<p>Check if <code>x</code> is a valid (properly encoded) instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"fullname": "pycfx.datasets.input_properties.InputProperties.fix_encoding", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.fix_encoding", "kind": "function", "doc": "<p>Fix the encoding of <code>x</code> to the closest valid instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"fullname": "pycfx.datasets.input_properties.InputProperties.describe_instance", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.describe_instance", "kind": "function", "doc": "<p>Print a human-readable description of a datapoint x, using feature names etc.. TODO: undo any preprocessing done by the dataset .describe_dataset() method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"fullname": "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints", "modulename": "pycfx.datasets.input_properties", "qualname": "InputProperties.gp_set_input_var_constraints", "kind": "function", "doc": "<p>Given a <code>grb_model</code>, output (equivalent) Input Vars and an Input MVar, of length n_features, which are constrained to be correctly encoded.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Var</span><span class=\"p\">],</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "pycfx.helpers": {"fullname": "pycfx.helpers", "modulename": "pycfx.helpers", "kind": "module", "doc": "<p>PyCFX Helpers\nHelpers for constants and visualisation</p>\n"}, "pycfx.helpers.constants": {"fullname": "pycfx.helpers.constants", "modulename": "pycfx.helpers.constants", "kind": "module", "doc": "<p>pycfx/helpers/constants.py\nHelpers - constants</p>\n"}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"fullname": "pycfx.helpers.constants.BACKEND_PYTORCH", "modulename": "pycfx.helpers.constants", "qualname": "BACKEND_PYTORCH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;pytorch&#x27;"}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"fullname": "pycfx.helpers.constants.BACKEND_TENSORFLOW", "modulename": "pycfx.helpers.constants", "qualname": "BACKEND_TENSORFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;tensorflow&#x27;"}, "pycfx.helpers.visualisation": {"fullname": "pycfx.helpers.visualisation", "modulename": "pycfx.helpers.visualisation", "kind": "module", "doc": "<p>pycfx/helpers/visualisation.py\nHelpers - visualisation tools, see usage in tutorial notebooks.</p>\n"}, "pycfx.helpers.visualisation.plot_dataset": {"fullname": "pycfx.helpers.visualisation.plot_dataset", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_split_dataset": {"fullname": "pycfx.helpers.visualisation.plot_split_dataset", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_split_dataset", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_decision_boundary": {"fullname": "pycfx.helpers.visualisation.plot_decision_boundary", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_decision_boundary", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">unary</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">feature_to_plot</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_counterfactual": {"fullname": "pycfx.helpers.visualisation.plot_counterfactual", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_counterfactual", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">factual</span>,</span><span class=\"param\">\t<span class=\"n\">counterfactual</span>,</span><span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">conformal</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"fullname": "pycfx.helpers.visualisation.plot_conformal_prediction", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_conformal_prediction", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">conformal</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"fullname": "pycfx.helpers.visualisation.plot_conformal_prediction_histogram", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_conformal_prediction_histogram", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">conformal</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"fullname": "pycfx.helpers.visualisation.plot_conformal_prediction_coverage", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_conformal_prediction_coverage", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">conformal</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">faded_background</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_kernel": {"fullname": "pycfx.helpers.visualisation.plot_kernel", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_kernel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span>,</span><span class=\"param\">\t<span class=\"n\">bandwidth</span>,</span><span class=\"param\">\t<span class=\"n\">centre</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_loss": {"fullname": "pycfx.helpers.visualisation.plot_loss", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">loss</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_calib</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_calib</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"fullname": "pycfx.helpers.visualisation.plot_loss_with_gradients", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_loss_with_gradients", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">loss_fn</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">mul</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_lof": {"fullname": "pycfx.helpers.visualisation.plot_lof", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_lof", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_neighbours</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lof_X</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lof_y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.helpers.visualisation.plot_impl": {"fullname": "pycfx.helpers.visualisation.plot_impl", "modulename": "pycfx.helpers.visualisation", "qualname": "plot_impl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">prop_included</span>,</span><span class=\"param\">\t<span class=\"n\">y_target</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span>,</span><span class=\"param\">\t<span class=\"n\">x_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">y_axis_ind</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.library": {"fullname": "pycfx.library", "modulename": "pycfx.library", "kind": "module", "doc": "<p>PyCFX Library</p>\n\n<p>External code copied into this repo then modified, used for external generators or MILP encodings. See each file for origins.</p>\n"}, "pycfx.library.featureTweakPy": {"fullname": "pycfx.library.featureTweakPy", "modulename": "pycfx.library.featureTweakPy", "kind": "module", "doc": "<p>pycfx/library/featureTweakPy.py\nExisting implementation of FeatureTweak\nCode adapted from <a href=\"https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py\">https://github.com/upura/featureTweakPy/blob/master/featureTweakPy.py</a></p>\n"}, "pycfx.library.featureTweakPy.search_path": {"fullname": "pycfx.library.featureTweakPy.search_path", "modulename": "pycfx.library.featureTweakPy", "qualname": "search_path", "kind": "function", "doc": "<p>return path index list containing [{leaf node id, inequality symbol, threshold, feature index}].\nestimator: decision tree\nmaxj: the number of selected leaf nodes</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">estimator</span>, </span><span class=\"param\"><span class=\"n\">class_labels</span>, </span><span class=\"param\"><span class=\"n\">aim_label</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"fullname": "pycfx.library.featureTweakPy.esatisfactory_instance", "modulename": "pycfx.library.featureTweakPy", "qualname": "esatisfactory_instance", "kind": "function", "doc": "<p>return the epsilon satisfactory instance of x.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">path_info</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.library.featureTweakPy.feature_tweaking": {"fullname": "pycfx.library.featureTweakPy.feature_tweaking", "modulename": "pycfx.library.featureTweakPy", "qualname": "feature_tweaking", "kind": "function", "doc": "<p>This function return the active feature tweaking vector.\nx: feature vector\nclass_labels: list containing the all class labels\naim_label: the label which we want to transform the label of x to</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ensemble_classifier</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">class_labels</span>, </span><span class=\"param\"><span class=\"n\">aim_label</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">cost_func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.library.tree_model_encoding": {"fullname": "pycfx.library.tree_model_encoding", "modulename": "pycfx.library.tree_model_encoding", "kind": "module", "doc": "<p>pycfx/library/tree_model_encoding.py\nLeaf formulation of SKLearn Decision Trees from the gurobi-machinelearning, licenced under the Apache Licence 2.0, Copyright 2021 Gurobi Optimization, LLC\nNote: this code has been modified from handling decision tree regressors to decision tree classifiers.\nSee the original at <a href=\"https://github.com/Gurobi/gurobi-machinelearning/blob/main/pycfx/gurobi_ml/modeling/decision_tree/decision_tree_model.py\">https://github.com/Gurobi/gurobi-machinelearning/blob/main/pycfx/gurobi_ml/modeling/decision_tree/decision_tree_model.py</a></p>\n"}, "pycfx.models": {"fullname": "pycfx.models", "modulename": "pycfx.models", "kind": "module", "doc": "<p>PyCFX Models: Wrappers for a variety of Python models for use in this library.</p>\n\n<p>Models available:</p>\n\n<ul>\n<li><code>PyTorchMLP</code>, MLP using PyTorch. For further customisation, you can subclass <code>PyTorchModel</code></li>\n<li><code>KerasMLP</code>, MLP using Keras. For further customisation, you can subclass <code>KerasModel</code></li>\n<li><code>RandomForestSKLearn</code>, <code>GradientBoostingSKLearn</code>, <code>DecisionTreeSKLearn</code>: SKLearn tree based classifiers</li>\n<li>Use the in-built training methods to train these models, or use <code>.load</code>/<code>.load_external</code> to point the wrapper to your pre-trained model file/object.</li>\n<li>Subclass <code>AbstractModel</code> to define your own model. See DifferentiableModel, MILPEncodableModel</li>\n</ul>\n"}, "pycfx.models.abstract_model": {"fullname": "pycfx.models.abstract_model", "modulename": "pycfx.models.abstract_model", "kind": "module", "doc": "<p>pycfx/models/abstract_model.py\nAbstract wrapper over a predictive model to allow a CFXs to be produced for a wide array of models with varying interfaces.</p>\n"}, "pycfx.models.abstract_model.AbstractModel": {"fullname": "pycfx.models.abstract_model.AbstractModel", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel", "kind": "class", "doc": "<p>Abstract wrapper over a predictive model to allow a CFXs to be produced for a wide array of models with varying interfaces.</p>\n", "bases": "abc.ABC"}, "pycfx.models.abstract_model.AbstractModel.__init__": {"fullname": "pycfx.models.abstract_model.AbstractModel.__init__", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.__init__", "kind": "function", "doc": "<p>Initialise with dataset <code>input_properties</code> and <code>config</code>, which can be used by subclasses to set model hyperparameters. \nNotably the <code>random_state</code> config is set to a fixed seed of 0</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span>)</span>"}, "pycfx.models.abstract_model.AbstractModel.model": {"fullname": "pycfx.models.abstract_model.AbstractModel.model", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.abstract_model.AbstractModel.config": {"fullname": "pycfx.models.abstract_model.AbstractModel.config", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.abstract_model.AbstractModel.random_state": {"fullname": "pycfx.models.abstract_model.AbstractModel.random_state", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.random_state", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"fullname": "pycfx.models.abstract_model.AbstractModel.input_properties", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.input_properties", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"fullname": "pycfx.models.abstract_model.AbstractModel.save_dir", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.save_dir", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.abstract_model.AbstractModel.train": {"fullname": "pycfx.models.abstract_model.AbstractModel.train", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.train", "kind": "function", "doc": "<p>Train the model with training data (X_train and y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.predict": {"fullname": "pycfx.models.abstract_model.AbstractModel.predict", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.predict", "kind": "function", "doc": "<p>Get the model prediction for a single example or a batch of examples</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"fullname": "pycfx.models.abstract_model.AbstractModel.evaluate", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.evaluate", "kind": "function", "doc": "<p>Get a dictionary containing the model performance over a test set (X_test, y_test), containing by default, accuracy, precision, and F1 score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"fullname": "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.load_or_save_evaluation", "kind": "function", "doc": "<p>Helper to return a saved evaluation of the model on test set (X_test, y_test), or run the evaluation and save it to model evaluation path if needed.\nSetting <code>use_pretrained</code> to False will always recompute new evaluation scores.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.savename": {"fullname": "pycfx.models.abstract_model.AbstractModel.savename", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.savename", "kind": "function", "doc": "<p>Returns the model's filename. By default uses a .model extension</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.save": {"fullname": "pycfx.models.abstract_model.AbstractModel.save", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.save", "kind": "function", "doc": "<p>Save the model to <code>save_path</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.load": {"fullname": "pycfx.models.abstract_model.AbstractModel.load", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.load", "kind": "function", "doc": "<p>Load the model from <code>save_path</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"fullname": "pycfx.models.abstract_model.AbstractModel.save_to_dir", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.save_to_dir", "kind": "function", "doc": "<p>Save the model to the directory <code>save_dir</code>, as a file with name given by <code>self.savename()</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"fullname": "pycfx.models.abstract_model.AbstractModel.load_from_dir", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.load_from_dir", "kind": "function", "doc": "<p>Load the model from the directory <code>save_dir</code>, which would be stored as a file with name given by <code>self.savename()</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.load_external": {"fullname": "pycfx.models.abstract_model.AbstractModel.load_external", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.load_external", "kind": "function", "doc": "<p>Provide a <code>model</code> object for this wrapper to use. Use to create an AbstractModel wrapper over a model trained externally from this library</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"fullname": "pycfx.models.abstract_model.AbstractModel.load_or_train", "modulename": "pycfx.models.abstract_model", "qualname": "AbstractModel.load_or_train", "kind": "function", "doc": "<p>Helper to return a saved trained model on training set (X_train, y_train), or train the model and save to <code>save_dir</code> needed.\nSetting <code>use_pretrained</code> to False will always re-train and re-save the model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">use_pretrained</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.DifferentiableModel": {"fullname": "pycfx.models.abstract_model.DifferentiableModel", "modulename": "pycfx.models.abstract_model", "qualname": "DifferentiableModel", "kind": "class", "doc": "<p>Abstract wrapper over a predictive model to allow a CFXs to be produced for a wide array of models with varying interfaces.</p>\n", "bases": "AbstractModel"}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"fullname": "pycfx.models.abstract_model.DifferentiableModel.get_backend", "modulename": "pycfx.models.abstract_model", "qualname": "DifferentiableModel.get_backend", "kind": "function", "doc": "<p>Obtain a string representing the backend of the model. E.g. pytorch or tensorflow. See helpers/constants.py for currently implemented backends.\nUsed to choose correct loss objects and optimisation loops.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"fullname": "pycfx.models.abstract_model.DifferentiableModel.compute_loss", "modulename": "pycfx.models.abstract_model", "qualname": "DifferentiableModel.compute_loss", "kind": "function", "doc": "<p>Obtain model's classification loss between two tensors of size (n_classes,).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.MILPEncodableModel": {"fullname": "pycfx.models.abstract_model.MILPEncodableModel", "modulename": "pycfx.models.abstract_model", "qualname": "MILPEncodableModel", "kind": "class", "doc": "<p>Abstract wrapper over a predictive model to allow a CFXs to be produced for a wide array of models with varying interfaces.</p>\n", "bases": "AbstractModel"}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"fullname": "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints", "modulename": "pycfx.models.abstract_model", "qualname": "MILPEncodableModel.gp_set_model_constraints", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and input variables <code>input_mvar</code>, return a new MVar which is constrained to be the model output for that input. Often makes use of methods from the gurobi-machinelearning library.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"fullname": "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint", "modulename": "pycfx.models.abstract_model", "qualname": "MILPEncodableModel.gp_set_classification_constraint", "kind": "function", "doc": "<p>Given a <code>grb_model</code>, input variables <code>input_mvar</code>, output variables <code>output_mvars</code>, and a target class, constrain the output_mvars to represent the target class (i.e. model predicts target class).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">db_distance</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.decisiontree_sklearn": {"fullname": "pycfx.models.decisiontree_sklearn", "modulename": "pycfx.models.decisiontree_sklearn", "kind": "module", "doc": "<p>pycfx/models/decisiontree_sklearn.py\nDecision Tree classifier</p>\n"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn", "kind": "class", "doc": "<p>Wrapper for SKLearn's DecisionTreeClassifier</p>\n", "bases": "pycfx.models.abstract_model.MILPEncodableModel"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.__init__", "kind": "function", "doc": "<p>Initialise with dataset <code>input_properties</code> and <code>config</code>\nThe config key <code>random_state</code> is set to a fixed 0, and other SKLearn arguments to DecisionTreeClassifier (e.g. max_depth) can be stated in the config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.random_state", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.train", "kind": "function", "doc": "<p>Train the model with training data (X_train and y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.predict", "kind": "function", "doc": "<p>Get the model prediction for a single example or a batch of examples</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.gp_set_model_constraints", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and input variables <code>input_mvar</code>, return a new MVar which is constrained to be the model output for that input. Often makes use of methods from the gurobi-machinelearning library.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"fullname": "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint", "modulename": "pycfx.models.decisiontree_sklearn", "qualname": "DecisionTreeSKLearn.gp_set_classification_constraint", "kind": "function", "doc": "<p>Given a <code>grb_model</code>, input variables <code>input_mvar</code>, output variables <code>output_mvars</code>, and a target class, constrain the output_mvars to represent the target class (i.e. model predicts target class).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">db_distance</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.gradientboosting_sklearn": {"fullname": "pycfx.models.gradientboosting_sklearn", "modulename": "pycfx.models.gradientboosting_sklearn", "kind": "module", "doc": "<p>pycfx/models/gradientboosting_sklearn.py\nGradient boosting classifier</p>\n"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn", "kind": "class", "doc": "<p>Wrapper over a SKLearn GradientBoostingClassifier.</p>\n", "bases": "pycfx.models.abstract_model.MILPEncodableModel"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.__init__", "kind": "function", "doc": "<p>Initialise with dataset <code>input_properties</code> and <code>config</code>\nThe config key <code>random_state</code> is set to a fixed 0, and other SKLearn arguments to GradientBoostingClassifier (e.g. n_estimators) can be stated in the config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.config", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.random_state", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.train", "kind": "function", "doc": "<p>Train the model with training data (X_train and y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.predict", "kind": "function", "doc": "<p>Get the model prediction for a single example or a batch of examples</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">softmax</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.gp_set_model_constraints", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and input variables <code>input_mvar</code>, return a new MVar which is constrained to be the model output for that input. Often makes use of methods from the gurobi-machinelearning library.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"fullname": "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint", "modulename": "pycfx.models.gradientboosting_sklearn", "qualname": "GradientBoostingSKLearn.gp_set_classification_constraint", "kind": "function", "doc": "<p>Given a <code>grb_model</code>, input variables <code>input_mvar</code>, output variables <code>output_mvars</code>, and a target class, constrain the output_mvars to represent the target class (i.e. model predicts target class).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">db_distance</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.latent_encodings": {"fullname": "pycfx.models.latent_encodings", "modulename": "pycfx.models.latent_encodings", "kind": "module", "doc": "<p>pycfx/models/latent_encodings.py\nLatent encodings for use in optimisation loops</p>\n"}, "pycfx.models.latent_encodings.LatentEncoding": {"fullname": "pycfx.models.latent_encodings.LatentEncoding", "modulename": "pycfx.models.latent_encodings", "qualname": "LatentEncoding", "kind": "class", "doc": "<p>Abstract latent encoding</p>\n", "bases": "abc.ABC"}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"fullname": "pycfx.models.latent_encodings.LatentEncoding.encode", "modulename": "pycfx.models.latent_encodings", "qualname": "LatentEncoding.encode", "kind": "function", "doc": "<p>Convert an input tensor to an encoded tensor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"fullname": "pycfx.models.latent_encodings.LatentEncoding.decode", "modulename": "pycfx.models.latent_encodings", "qualname": "LatentEncoding.decode", "kind": "function", "doc": "<p>Convert an encoded tensor to a tensor in the input space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.latent_encodings.IdentityEncoding": {"fullname": "pycfx.models.latent_encodings.IdentityEncoding", "modulename": "pycfx.models.latent_encodings", "qualname": "IdentityEncoding", "kind": "class", "doc": "<p>Identity encoding: no change</p>\n", "bases": "LatentEncoding"}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"fullname": "pycfx.models.latent_encodings.IdentityEncoding.encode", "modulename": "pycfx.models.latent_encodings", "qualname": "IdentityEncoding.encode", "kind": "function", "doc": "<p>Convert an input tensor to an encoded tensor</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"fullname": "pycfx.models.latent_encodings.IdentityEncoding.decode", "modulename": "pycfx.models.latent_encodings", "qualname": "IdentityEncoding.decode", "kind": "function", "doc": "<p>Convert an encoded tensor to a tensor in the input space</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">z</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras": {"fullname": "pycfx.models.mlp_keras", "modulename": "pycfx.models.mlp_keras", "kind": "module", "doc": "<p>pycfx/models/mlp_keras.py\nAbstract wrapper for any keras-backed model, and a specific Keras MLP implementation</p>\n"}, "pycfx.models.mlp_keras.KerasModel": {"fullname": "pycfx.models.mlp_keras.KerasModel", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel", "kind": "class", "doc": "<p>Abstract wrapper for building, training, saving, loading and evaluating any keras-backed model</p>\n", "bases": "pycfx.models.abstract_model.DifferentiableModel"}, "pycfx.models.mlp_keras.KerasModel.__init__": {"fullname": "pycfx.models.mlp_keras.KerasModel.__init__", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.__init__", "kind": "function", "doc": "<p>Initialise with dataset <code>input_properties</code> and <code>config</code>\nThe config key <code>random_state</code> is set to a fixed 0, hidden_dims set to [50], batch size to 64, epochs to 50, and learning rate to 0.001</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span>)</span>"}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"fullname": "pycfx.models.mlp_keras.KerasModel.batch_size", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.batch_size", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_keras.KerasModel.epochs": {"fullname": "pycfx.models.mlp_keras.KerasModel.epochs", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.epochs", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_keras.KerasModel.lr": {"fullname": "pycfx.models.mlp_keras.KerasModel.lr", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.lr", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_keras.KerasModel.savename": {"fullname": "pycfx.models.mlp_keras.KerasModel.savename", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.savename", "kind": "function", "doc": "<p>Returns the model's filename. By default uses a .model extension</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.train": {"fullname": "pycfx.models.mlp_keras.KerasModel.train", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.train", "kind": "function", "doc": "<p>Train the model with training data (X_train and y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.predict": {"fullname": "pycfx.models.mlp_keras.KerasModel.predict", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.predict", "kind": "function", "doc": "<p>Get the model prediction for a single example or a batch of examples</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.load": {"fullname": "pycfx.models.mlp_keras.KerasModel.load", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.load", "kind": "function", "doc": "<p>Load the model from <code>save_path</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.save": {"fullname": "pycfx.models.mlp_keras.KerasModel.save", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.save", "kind": "function", "doc": "<p>Save the model to <code>save_path</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"fullname": "pycfx.models.mlp_keras.KerasModel.evaluate", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.evaluate", "kind": "function", "doc": "<p>Get a dictionary containing the model performance over a test set (X_test, y_test), containing by default, accuracy, precision, and F1 score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"fullname": "pycfx.models.mlp_keras.KerasModel.compute_loss", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.compute_loss", "kind": "function", "doc": "<p>Obtain model's classification loss between two tensors of size (n_classes,).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"n\">tensorflow</span><span class=\"o\">.</span><span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>,</span><span class=\"param\">\t<span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"n\">tensorflow</span><span class=\"o\">.</span><span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">tensorflow</span><span class=\"o\">.</span><span class=\"n\">python</span><span class=\"o\">.</span><span class=\"n\">framework</span><span class=\"o\">.</span><span class=\"n\">tensor</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.load_external": {"fullname": "pycfx.models.mlp_keras.KerasModel.load_external", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.load_external", "kind": "function", "doc": "<p>Provide a <code>model</code> object for this wrapper to use. Use to create an AbstractModel wrapper over a model trained externally from this library</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"fullname": "pycfx.models.mlp_keras.KerasModel.get_backend", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasModel.get_backend", "kind": "function", "doc": "<p>Obtain a string representing the backend of the model. E.g. pytorch or tensorflow. See helpers/constants.py for currently implemented backends.\nUsed to choose correct loss objects and optimisation loops.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasMLP": {"fullname": "pycfx.models.mlp_keras.KerasMLP", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasMLP", "kind": "class", "doc": "<p>Multi-layer perceptron using KerasModel</p>\n", "bases": "KerasModel, pycfx.models.abstract_model.MILPEncodableModel"}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"fullname": "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasMLP.gp_set_model_constraints", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and input variables <code>input_mvar</code>, return a new MVar which is constrained to be the model output for that input. Often makes use of methods from the gurobi-machinelearning library.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"fullname": "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint", "modulename": "pycfx.models.mlp_keras", "qualname": "KerasMLP.gp_set_classification_constraint", "kind": "function", "doc": "<p>Given a <code>grb_model</code>, input variables <code>input_mvar</code>, output variables <code>output_mvars</code>, and a target class, constrain the output_mvars to represent the target class (i.e. model predicts target class).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">db_distance</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch": {"fullname": "pycfx.models.mlp_pytorch", "modulename": "pycfx.models.mlp_pytorch", "kind": "module", "doc": "<p>pycfx/models/mlp_pytorch.py\nAbstract wrapper for any PyTorch model, and a specific PyTorch MLP implementation</p>\n"}, "pycfx.models.mlp_pytorch.PyTorchModel": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel", "kind": "class", "doc": "<p>Abstract wrapper for building, training, saving, loading and evaluating any PyTorch model</p>\n", "bases": "pycfx.models.abstract_model.DifferentiableModel"}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.__init__", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.__init__", "kind": "function", "doc": "<p>Initialise with dataset <code>input_properties</code> and <code>config</code>\nThe config key <code>random_state</code> is set to a fixed 0, hidden_dims set to [50], batch size to 64, epochs to 50, and learning rate to 0.01</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span>)</span>"}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.batch_size", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.batch_size", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.epochs", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.epochs", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.lr", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.lr", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.device", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.device", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.train", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.train", "kind": "function", "doc": "<p>Train the model with training data (X_train and y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.predict", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.predict", "kind": "function", "doc": "<p>Get the model prediction for a single example or a batch of examples</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.load", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.load", "kind": "function", "doc": "<p>Load the model from <code>save_path</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.save", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.save", "kind": "function", "doc": "<p>Save the model to <code>save_path</code></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">save_path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.evaluate", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.evaluate", "kind": "function", "doc": "<p>Get a dictionary containing the model performance over a test set (X_test, y_test), containing by default, accuracy, precision, and F1 score.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_test</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.compute_loss", "kind": "function", "doc": "<p>Obtain model's classification loss between two tensors of size (n_classes,).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y1</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>, </span><span class=\"param\"><span class=\"n\">y2</span><span class=\"p\">:</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span></span><span class=\"return-annotation\">) -> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">Tensor</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.load_external", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.load_external", "kind": "function", "doc": "<p>Provide a <code>model</code> object for this wrapper to use. Use to create an AbstractModel wrapper over a model trained externally from this library</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"fullname": "pycfx.models.mlp_pytorch.PyTorchModel.get_backend", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchModel.get_backend", "kind": "function", "doc": "<p>Obtain a string representing the backend of the model. E.g. pytorch or tensorflow. See helpers/constants.py for currently implemented backends.\nUsed to choose correct loss objects and optimisation loops.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"fullname": "pycfx.models.mlp_pytorch.PyTorchMLP", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchMLP", "kind": "class", "doc": "<p>Multi-layer perceptron using PyTorchModel</p>\n", "bases": "PyTorchModel, pycfx.models.abstract_model.MILPEncodableModel"}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"fullname": "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchMLP.gp_set_model_constraints", "kind": "function", "doc": "<p>Given a <code>grb_model</code> and input variables <code>input_mvar</code>, return a new MVar which is constrained to be the model output for that input. Often makes use of methods from the gurobi-machinelearning library.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"fullname": "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint", "modulename": "pycfx.models.mlp_pytorch", "qualname": "PyTorchMLP.gp_set_classification_constraint", "kind": "function", "doc": "<p>Given a <code>grb_model</code>, input variables <code>input_mvar</code>, output variables <code>output_mvars</code>, and a target class, constrain the output_mvars to represent the target class (i.e. model predicts target class).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">db_distance</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "pycfx.models.randomforest_sklearn": {"fullname": "pycfx.models.randomforest_sklearn", "modulename": "pycfx.models.randomforest_sklearn", "kind": "module", "doc": "<p>pycfx/models/randomforest_sklearn.py\nRandom forest classifier</p>\n"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn", "kind": "class", "doc": "<p>Wrapper over SKLearn's RandomForestClassifier</p>\n", "bases": "pycfx.models.abstract_model.AbstractModel"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.__init__", "kind": "function", "doc": "<p>Initialise with dataset <code>input_properties</code> and <code>config</code>\nThe config key <code>random_state</code> is set to a fixed 0, and other SKLearn arguments to RandomForestClassifier (e.g. n_estimators) can be stated in the config.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">input_properties</span><span class=\"p\">:</span> <span class=\"n\">pycfx</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">input_properties</span><span class=\"o\">.</span><span class=\"n\">InputProperties</span></span>)</span>"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.n_estimators", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.max_depth", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.max_n_leaves", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.model", "kind": "variable", "doc": "<p></p>\n"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.train", "kind": "function", "doc": "<p>Train the model with training data (X_train and y_train)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">y_train</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.predict", "kind": "function", "doc": "<p>Get the model prediction for a single example or a batch of examples</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"n\">array</span><span class=\"o\">&gt;</span>:</span></span>", "funcdef": "def"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.gp_set_model_constraints", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">input_mvar</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span></span><span class=\"return-annotation\">) -> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>:</span></span>", "funcdef": "def"}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"fullname": "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint", "modulename": "pycfx.models.randomforest_sklearn", "qualname": "RandomForestSKLearn.gp_set_classification_constraint", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">grb_model</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">output_vars</span><span class=\"p\">:</span> <span class=\"n\">gurobipy</span><span class=\"o\">.</span><span class=\"n\">MVar</span>,</span><span class=\"param\">\t<span class=\"n\">target_class</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">db_distance</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}}, "docInfo": {"pycfx": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 5}, "pycfx.benchmarker": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 90}, "pycfx.benchmarker.counterfactual_benchmarker": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 218, "bases": 0, "doc": 77}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 5}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 9}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 20}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 32}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 12}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 27}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 53, "bases": 0, "doc": 35}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 338, "bases": 0, "doc": 176}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 41}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 27}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 22}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 35}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 121, "bases": 0, "doc": 104}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 20}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 124, "bases": 0, "doc": 92}, "pycfx.benchmarker.factories": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "pycfx.benchmarker.factories.ModelFactory": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 39}, "pycfx.benchmarker.factories.ModelFactory.Model": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.ModelFactory.config": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 39}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 11}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 28}, "pycfx.benchmarker.factories.GeneratorFactory": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 66, "bases": 0, "doc": 34}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 197, "bases": 0, "doc": 42}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 15}, "pycfx.benchmarker.metrics": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 180, "bases": 0, "doc": 56}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 183, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 229, "bases": 0, "doc": 51}, "pycfx.benchmarker.metrics.ValidityMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 18}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 184, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.FailuresMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 23}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 184, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 49}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 183, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.LOFMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 32}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 25, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 183, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.LOFMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.DistanceMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 37}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 183, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.SensitivityMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 73}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 149, "bases": 0, "doc": 56}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 183, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.StabilityMetric": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 54}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 183, "bases": 0, "doc": 61}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 8}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 27}, "pycfx.conformal": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 87}, "pycfx.conformal.conformal_benchmarker": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 19}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 122}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 111, "bases": 0, "doc": 133}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 252}, "pycfx.conformal.conformal_helpers": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "pycfx.conformal.conformal_helpers.sample_points": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 93, "bases": 0, "doc": 18}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 30}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 126, "bases": 0, "doc": 74}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 65, "bases": 0, "doc": 19}, "pycfx.conformal.kernels": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "pycfx.conformal.kernels.KERNEL_REGISTRY": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 44, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.kernels.register_kernel": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 27}, "pycfx.conformal.kernels.get_kernel": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 86, "bases": 0, "doc": 9}, "pycfx.conformal.kernels.feature_distance": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 45}, "pycfx.conformal.kernels.gaussian_kernel": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 11}, "pycfx.conformal.kernels.box_kernel_l1": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 14}, "pycfx.conformal.kernels.box_kernel_l2": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 14}, "pycfx.conformal.kernels.box_kernel_linf": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 32, "bases": 0, "doc": 14}, "pycfx.conformal.localised_conformal_lcp": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 22}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 18}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 61}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"qualname": 3, "fullname": 8, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 33}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 18}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 53}, "pycfx.conformal.localised_conformal_tree": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 7}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 103, "bases": 0, "doc": 58}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 15}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 19}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 12}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 16}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 14}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 14}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 19}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 12}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 7}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 106}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"qualname": 5, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 10}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 12}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 12}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 13}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"qualname": 6, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 12}, "pycfx.conformal.losses_conformal": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 35}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 21}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 16}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 21}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 6}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 21}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 16}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 21}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 6}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 21}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 16}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 21}, "pycfx.conformal.milp_utils": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 28}, "pycfx.conformal.milp_utils.gp_get_weights": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 104, "bases": 0, "doc": 71}, "pycfx.conformal.milp_utils.gp_get_quantile": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 35}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 57}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 10}, "pycfx.conformal.score_fns": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 59, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.score_fns.ScoreFn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 11}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 32}, "pycfx.conformal.score_fns.register_scorefn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 17}, "pycfx.conformal.score_fns.get_scorefn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 15}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 12}, "pycfx.conformal.score_fns.LinearScoreFn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 13}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 32}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 28}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 32}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 37}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 32}, "pycfx.conformal.split_conformal": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 61}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"qualname": 3, "fullname": 7, "annotation": 6, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 11}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 32}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 22}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 12}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 12}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 71, "bases": 0, "doc": 34}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 41, "bases": 0, "doc": 69}, "pycfx.counterfactual_explanations": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 117}, "pycfx.counterfactual_explanations.cf_conformal": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 30}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 94, "bases": 0, "doc": 61}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 25}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.cf_generator": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 11}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 7}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 30}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 8}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 25}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 19}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 88, "bases": 0, "doc": 42}, "pycfx.counterfactual_explanations.cf_gradient_based": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 6}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 120, "bases": 0, "doc": 72}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 19}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 25}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 16}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 25}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 26}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 25}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.cf_mindist": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 14}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 11}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 47}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 20}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 42}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 80, "bases": 0, "doc": 25}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.differentiable": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 165, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 22}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 14}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 16}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 45}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 96, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 38}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 28}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 24}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 13}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 30}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 24}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 39}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 27}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 42}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 24}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 36, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 16}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 24}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 140, "bases": 0, "doc": 96}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 42}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 59, "bases": 0, "doc": 27}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 102, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 28}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 32}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 24}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 30}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"qualname": 5, "fullname": 11, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 24}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 39}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 42}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"qualname": 4, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 27}, "pycfx.counterfactual_explanations.external": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 14}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 46}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"qualname": 2, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.external.cf_focus": {"qualname": 0, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"qualname": 1, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 17}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 116, "bases": 0, "doc": 38}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 67, "bases": 0, "doc": 21}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"qualname": 3, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 19}, "pycfx.datasets": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 157}, "pycfx.datasets.datasets": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "pycfx.datasets.datasets.RANDOM_STATE": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 1, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.datasets.Dataset": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 39}, "pycfx.datasets.datasets.Dataset.__init__": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 15}, "pycfx.datasets.datasets.Dataset.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.Dataset.get_X_y": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 12}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 8}, "pycfx.datasets.datasets.Dataset.get_name": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 27}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 15}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 13}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 16}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"qualname": 5, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 24, "bases": 0, "doc": 46}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 125, "bases": 0, "doc": 66}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 47, "bases": 0, "doc": 9}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 24}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 7}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.SyntheticMoons": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 6}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.SyntheticMulticlass": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 6}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.SyntheticBimodal": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 32}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.GermanCredit": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 55}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.GermanCreditv2": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 57}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 37}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.CaliforniaHousing": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 70}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.datasets.AdultIncome": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 39}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 18, "bases": 0, "doc": 22}, "pycfx.datasets.dim_reduction": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 15, "bases": 0, "doc": 16}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 41}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 11}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 10}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 26}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 28}, "pycfx.datasets.dim_reduction.PCADimReduction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 5}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 41}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 11}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 26}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 28}, "pycfx.datasets.dim_reduction.LDADimReduction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 5}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 41}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 26}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 28}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 41}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 26}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 14}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 144, "bases": 0, "doc": 41}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 9}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 11}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 26}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 42, "bases": 0, "doc": 28}, "pycfx.datasets.input_properties": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 10}, "pycfx.datasets.input_properties.InputProperties": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "pycfx.datasets.input_properties.InputProperties.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 208, "bases": 0, "doc": 103}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.n_features": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.bound": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 16}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 8}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 14}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 15}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 29, "bases": 0, "doc": 27}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 58, "bases": 0, "doc": 28}, "pycfx.helpers": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 9}, "pycfx.helpers.constants": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 6}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 5, "signature": 0, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "pycfx.helpers.visualisation.plot_dataset": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_split_dataset": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 83, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_decision_boundary": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 102, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_counterfactual": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 101, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"qualname": 3, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 63, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 70, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_kernel": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 78, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_loss": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"qualname": 4, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 119, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_lof": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 103, "bases": 0, "doc": 3}, "pycfx.helpers.visualisation.plot_impl": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 3}, "pycfx.library": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 27}, "pycfx.library.featureTweakPy": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 16}, "pycfx.library.featureTweakPy.search_path": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 25}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 10}, "pycfx.library.featureTweakPy.feature_tweaking": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 35}, "pycfx.library.tree_model_encoding": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 57}, "pycfx.models": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 121}, "pycfx.models.abstract_model": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 28}, "pycfx.models.abstract_model.AbstractModel": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 25}, "pycfx.models.abstract_model.AbstractModel.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 38}, "pycfx.models.abstract_model.AbstractModel.model": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.abstract_model.AbstractModel.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.abstract_model.AbstractModel.random_state": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.abstract_model.AbstractModel.train": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 14}, "pycfx.models.abstract_model.AbstractModel.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 15}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 26}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 45}, "pycfx.models.abstract_model.AbstractModel.savename": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 13}, "pycfx.models.abstract_model.AbstractModel.save": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 10}, "pycfx.models.abstract_model.AbstractModel.load": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 10}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 24}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 28}, "pycfx.models.abstract_model.AbstractModel.load_external": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 27}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 45}, "pycfx.models.abstract_model.DifferentiableModel": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 25}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 10, "bases": 0, "doc": 33}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 44, "bases": 0, "doc": 15}, "pycfx.models.abstract_model.MILPEncodableModel": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 25}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 41}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 40}, "pycfx.models.decisiontree_sklearn": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 7}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 50, "bases": 0, "doc": 43}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 14}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 15}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 41}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 40}, "pycfx.models.gradientboosting_sklearn": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 8}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 62, "bases": 0, "doc": 43}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 14}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 15}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 41}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 40}, "pycfx.models.latent_encodings": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "pycfx.models.latent_encodings.LatentEncoding": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 2, "doc": 5}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 10}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 13}, "pycfx.models.latent_encodings.IdentityEncoding": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 1, "doc": 6}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 10}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 13}, "pycfx.models.mlp_keras": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 18}, "pycfx.models.mlp_keras.KerasModel": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 15}, "pycfx.models.mlp_keras.KerasModel.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 44}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_keras.KerasModel.epochs": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_keras.KerasModel.lr": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_keras.KerasModel.savename": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 13}, "pycfx.models.mlp_keras.KerasModel.train": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 14}, "pycfx.models.mlp_keras.KerasModel.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 15}, "pycfx.models.mlp_keras.KerasModel.load": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 10}, "pycfx.models.mlp_keras.KerasModel.save": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 10}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 26}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 97, "bases": 0, "doc": 15}, "pycfx.models.mlp_keras.KerasModel.load_external": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 27}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 33}, "pycfx.models.mlp_keras.KerasMLP": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 7}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 41}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 40}, "pycfx.models.mlp_pytorch": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 17}, "pycfx.models.mlp_pytorch.PyTorchModel": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 14}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 44}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 14}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 15}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 10}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 10}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 26}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 15}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 27}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 14, "bases": 0, "doc": 33}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 7}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 41}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 40}, "pycfx.models.randomforest_sklearn": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 8}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 7}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 43}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 14}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"qualname": 2, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 15}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 3}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 3}}, "length": 591, "save": true}, "index": {"qualname": {"root": {"2": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 37, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 38, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}}, "df": 11, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 5}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 12}}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 17, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 18}}}}}}}}}, "f": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}}, "df": 6}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}}, "df": 10}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 24}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10, "s": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}}, "df": 8}}}}}, "s": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 14}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 8, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "f": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}}, "df": 3, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}}, "df": 3}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 37, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}}, "df": 7, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 16}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}}, "df": 6}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}}, "df": 27}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 8}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}}, "df": 10, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}}, "df": 7}}}}}}, "s": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}}, "df": 5}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 11, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}}, "df": 16}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 11}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}}, "df": 1}}, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}}, "df": 16, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 4}}}}}}}}, "w": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}}, "df": 3}}}, "p": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}}, "df": 1}}, "x": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 6}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}}, "df": 1}}, "d": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}}, "df": 3}, "x": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}}, "df": 5}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}}, "df": 8, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}}, "df": 1}}}, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}}, "df": 19, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 7}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 9}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 6, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}}, "df": 9}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 4}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 7}}}}}}, "s": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}}, "df": 6}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 10}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 13, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}}, "df": 4}}}}}, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}}, "df": 6, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 14}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 6}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 8}}}}}}}}}, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 17}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 32}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}}, "df": 2, "v": {"2": {"docs": {"pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}}, "df": 10}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}, "s": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 34}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}}, "df": 10, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 21, "u": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 15}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 17}}}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 1}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 2}, "e": {"docs": {"pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}}, "df": 8}, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1}}, "df": 6}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 21}}}}}}}}}}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}}, "df": 6, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 6}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}}, "df": 11, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}}, "df": 9}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}}, "df": 4}}}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}}, "df": 1}}}}}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}}, "df": 9}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}}, "df": 3}}}}}}}}, "o": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}}, "df": 2}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.AdultIncome": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1}}, "df": 3}}}, "l": {"docs": {"pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 18}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}}, "df": 5}}}}}}, "k": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 17}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 7}}}}}}, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 3}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 1}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 2, "d": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 15, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}}, "df": 12}}}}}}}}}}, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 6}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}}, "df": 3}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"1": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}}, "df": 2}, "2": {"docs": {"pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.helpers.visualisation.plot_lof": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}}, "df": 6}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 9}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"2": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}}, "docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 2}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}}, "df": 4}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}}, "df": 14}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}}, "df": 14}}}}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}}, "df": 6}, "y": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}}, "df": 7}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 8}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}}, "df": 2}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}}, "df": 1}}}}}}}}}}}, "fullname": {"root": {"2": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 37, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {"pycfx": {"tf": 1}, "pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.helpers": {"tf": 1}, "pycfx.helpers.constants": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 591}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 34, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 9}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 14}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}}, "df": 2}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 7}}}}}}, "s": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}}, "df": 23}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 10}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 4}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 13, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 107}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}}, "df": 5}}}}}}, "k": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 17}}}, "d": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}}, "df": 20}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 7}}}}}}, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 3}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}}, "df": 183, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 5}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 12}}}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 158, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 18}}}}}}}}}, "f": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}}, "df": 6}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}}, "df": 10}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 24}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10, "s": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}}, "df": 8}}}}}, "s": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.helpers.constants": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 14}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}}, "df": 3}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 71, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 38, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 8, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "f": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}}, "df": 3, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}}, "df": 3}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 37, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}}, "df": 23, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 16}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}}, "df": 6}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}}, "df": 3}}}, "d": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}}, "df": 27, "s": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticMoons": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 82}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 8}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}}, "df": 10, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}}, "df": 7}}}}}}, "s": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 2}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}}, "df": 5}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}}, "df": 32, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 69, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}}, "df": 16}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 11}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}}, "df": 1}}, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}}, "df": 16, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 4}}}}}}}}, "w": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}}, "df": 6, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}}, "df": 1}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}}, "df": 3}}}, "p": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}}, "df": 5}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 20}}}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}}, "df": 1}}, "x": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 7, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 6}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}}, "df": 8, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}}, "df": 5}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 4}}}}}}}, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}}, "df": 1}}}, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}}, "df": 14}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1}}, "df": 1}}, "d": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}}, "df": 3}, "x": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}}, "df": 5}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}}, "df": 8, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}}, "df": 46}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}}, "df": 1}}}, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}}, "df": 43, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 107}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 9}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 6, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}}, "df": 10, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}}, "df": 9}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 36}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 4}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 32}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.randomforest_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 11, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 6}}}}, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 6}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 8}}}}}}}}}, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 17}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 32}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}}, "df": 2, "v": {"2": {"docs": {"pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}}, "df": 20, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}}, "df": 10}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}, "s": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 34}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}}, "df": 10, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 21, "u": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 15}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 17}}}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 1}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1}}, "df": 3}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 2}, "e": {"docs": {"pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}}, "df": 8}, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1}}, "df": 6}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.split_conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}}, "df": 25, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 21}}}}}}}}}}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 32}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}}, "df": 6, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 2}}}, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 6}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}}, "df": 11, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 10, "s": {"docs": {"pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 7}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}}, "df": 4}}}}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 142}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.external": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 19}}}}}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 1}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1}}, "df": 1}}}}}}}}}}, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}}, "df": 9}}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 44, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}}, "df": 3}}}}}}}}, "o": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}}, "df": 2}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.AdultIncome": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 2}}}}}}}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1}}, "df": 3}}}, "l": {"docs": {"pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}}, "df": 25, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 18}}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 2, "d": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1.4142135623730951}}, "df": 52, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}}, "df": 12}}}}}}}}}}, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 6}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}}, "df": 3}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.helpers.visualisation": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 13}}}}}}}}}}}}}, "l": {"1": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}}, "df": 2}, "2": {"docs": {"pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.helpers.visualisation.plot_lof": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}}, "df": 6}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 61}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}}, "df": 36}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1}}, "df": 31, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 9}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"2": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}}, "docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 6}}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 18}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 2}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1}}, "df": 4}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.helpers": {"tf": 1}, "pycfx.helpers.constants": {"tf": 1}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 22}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}}, "df": 1}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 9}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 29, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}}, "df": 14}}}}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1}}, "df": 3}}}}}, "x": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}}, "df": 6}, "y": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1}}, "df": 7}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 8}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1}}, "df": 2}}}, "annotation": {"root": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1}}, "df": 2}}}}}}}}}}}, "default_value": {"root": {"2": {"docs": {"pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1}}, "df": 1}, "docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2.449489742783178}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 4.358898943540674}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 2}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1.4142135623730951}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1.4142135623730951}}, "df": 6, "x": {"2": {"7": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2.8284271247461903}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 4}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 6}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 2.8284271247461903}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1.4142135623730951}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1.4142135623730951}}, "df": 6}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "t": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 3.4641016151377544}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 4}}, "l": {"1": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1.4142135623730951}}, "df": 1}, "2": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 3.4641016151377544}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1.4142135623730951}}, "df": 1}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"2": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}, "docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 3.3166247903554}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 2.449489742783178}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 3.4641016151377544}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 3, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 2.449489742783178}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 2.8284271247461903}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 3.3166247903554}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}}, "df": 1}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 2.8284271247461903}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 2.8284271247461903}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1}}, "df": 3}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 2}}, "df": 1}}}}}}}}}}}}}}, "signature": {"root": {"0": {"0": {"1": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "1": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}, "5": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 5}, "6": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 6}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}}, "df": 28}, "1": {"0": {"0": {"0": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}}, "df": 2}, "docs": {"pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}}, "df": 4}, "docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 25, "e": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 8}}, "2": {"0": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}}, "df": 1}, "docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 4}, "3": {"0": {"0": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "9": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 3.4641016151377544}}, "df": 10}, "docs": {"pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 1}, "4": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}}, "df": 5}, "5": {"0": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1}, "docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 1}, "9": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 13.114877048604}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 4.898979485566356}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 3.4641016151377544}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 3.4641016151377544}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 3.4641016151377544}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 3.4641016151377544}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 4.47213595499958}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 6.557438524302}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 16.3707055437449}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 6.164414002968976}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 8.246211251235321}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 7.745966692414834}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 5.0990195135927845}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 10.099504938362077}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 3.1622776601683795}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 10.04987562112089}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 8.306623862918075}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 8.602325267042627}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 5.385164807134504}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 6.082762530298219}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 7.14142842854285}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 12.328828005937952}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 5.477225575051661}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 11.958260743101398}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 3.4641016151377544}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 13.416407864998739}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 3.1622776601683795}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 3.1622776601683795}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 3.4641016151377544}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 3.1622776601683795}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 4.47213595499958}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 3.1622776601683795}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 5.291502622129181}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 3.4641016151377544}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 5.291502622129181}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 10.862780491200215}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 3.1622776601683795}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 4.47213595499958}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 12}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 3.1622776601683795}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 7}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 9.539392014169456}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 9.38083151964686}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 8.94427190999916}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 8.717797887081348}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 7.745966692414834}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 9.899494936611665}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 7.211102550927978}, "pycfx.conformal.kernels.register_kernel": {"tf": 3.7416573867739413}, "pycfx.conformal.kernels.get_kernel": {"tf": 8.366600265340756}, "pycfx.conformal.kernels.feature_distance": {"tf": 4.69041575982343}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 5.0990195135927845}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 5.0990195135927845}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 5.0990195135927845}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 5.0990195135927845}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 9.433981132056603}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 7.874007874011811}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 5.385164807134504}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 7.0710678118654755}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 9}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 3.7416573867739413}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 4.47213595499958}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 9.433981132056603}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 5.916079783099616}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 7.874007874011811}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 4.898979485566356}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 5.385164807134504}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 7.0710678118654755}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 7.0710678118654755}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 4.242640687119285}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 6}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 7.0710678118654755}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 4.242640687119285}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 6}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 7.0710678118654755}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 4.242640687119285}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 6}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 6.855654600401044}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 9}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 7.483314773547883}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 8.306623862918075}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 8.831760866327848}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 5.0990195135927845}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 3.7416573867739413}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 5.291502622129181}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 8.426149773176359}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 8.426149773176359}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 8.426149773176359}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 9.433981132056603}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 4.47213595499958}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 7.280109889280518}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 7.874007874011811}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 4.898979485566356}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 5.385164807134504}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 7.483314773547883}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 5.656854249492381}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 8.54400374531753}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 7.937253933193772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 6.782329983125268}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 9.539392014169456}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 6.782329983125268}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 7.937253933193772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 7.280109889280518}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 8.246211251235321}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 9.797958971132712}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 7.937253933193772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 5.477225575051661}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 7.937253933193772}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 5.477225575051661}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 7.937253933193772}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 5.477225575051661}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 9.539392014169456}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 5.477225575051661}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 9.539392014169456}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 7.937253933193772}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 6.782329983125268}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 6}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 8.888194417315589}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 6.164414002968976}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 5.291502622129181}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 4.69041575982343}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 5.0990195135927845}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 10.344080432788601}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 6.782329983125268}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 6.782329983125268}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 8.831760866327848}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 4}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 5.0990195135927845}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 4.242640687119285}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 3.7416573867739413}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 9.539392014169456}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 7.280109889280518}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 9.539392014169456}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 7.280109889280518}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 7.280109889280518}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 5.830951894845301}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 6.6332495807108}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 5.477225575051661}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 4.898979485566356}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 3.4641016151377544}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 8.18535277187245}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 5.291502622129181}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 7.615773105863909}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 7.615773105863909}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 4.47213595499958}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 10}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 6}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 5}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 4}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 4}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 3.4641016151377544}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 10.63014581273465}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 3.4641016151377544}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 6.324555320336759}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 6.324555320336759}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 10.63014581273465}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 5.830951894845301}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 5.830951894845301}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 10.63014581273465}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 5.830951894845301}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 10.63014581273465}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 5.830951894845301}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 10.63014581273465}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 6.164414002968976}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 5.830951894845301}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 5.830951894845301}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 12.569805089976535}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 4.123105625617661}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 3.4641016151377544}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 4.898979485566356}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 6.164414002968976}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 4.898979485566356}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 6.855654600401044}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 7.211102550927978}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 7.874007874011811}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 8.717797887081348}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 8.774964387392123}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 7.937253933193772}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 6.928203230275509}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 7.280109889280518}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 7.681145747868608}, "pycfx.helpers.visualisation.plot_loss": {"tf": 7.937253933193772}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 9.486832980505138}, "pycfx.helpers.visualisation.plot_lof": {"tf": 8.717797887081348}, "pycfx.helpers.visualisation.plot_impl": {"tf": 7.3484692283495345}, "pycfx.library.featureTweakPy.search_path": {"tf": 4.242640687119285}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 4.242640687119285}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 5.477225575051661}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 5.830951894845301}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 5.830951894845301}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 6.164414002968976}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 6}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 7.3484692283495345}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 3.4641016151377544}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 4.898979485566356}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 4.898979485566356}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 4.898979485566356}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 4.898979485566356}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 3.7416573867739413}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 8.06225774829855}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 3}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 6}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 6.557438524302}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 7.54983443527075}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 6.324555320336759}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 5.830951894845301}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 6.164414002968976}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 6.557438524302}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 7.54983443527075}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 7}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 5.830951894845301}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 7.416198487095663}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 6.557438524302}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 7.54983443527075}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 6.164414002968976}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 6.164414002968976}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 6.164414002968976}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 6.164414002968976}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 5.830951894845301}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 3.4641016151377544}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 5.830951894845301}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 6.164414002968976}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 4.898979485566356}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 4.898979485566356}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 6}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 8.888194417315589}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 3.7416573867739413}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 3.4641016151377544}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 6.557438524302}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 7.54983443527075}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 5.830951894845301}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 5.830951894845301}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 6.164414002968976}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 4.898979485566356}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 4.69041575982343}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 6}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 6.324555320336759}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 3.7416573867739413}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 3.4641016151377544}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 6.557438524302}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 7.54983443527075}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 5.830951894845301}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 5.830951894845301}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 6.164414002968976}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 6.557438524302}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 7.54983443527075}}, "df": 287, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}}, "df": 12, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 45}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 18}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 40}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 10}}}}}}, "m": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 4, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "p": {"2": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "f": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 3}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 6}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 63}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1.4142135623730951}}, "df": 27, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}}, "df": 26}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 13}}}}}}}, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 7}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1.4142135623730951}}, "df": 50}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 5, "s": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}}, "df": 17, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.8284271247461903}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 57, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 2}}}, "n": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 2}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 2}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 2}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.get_kernel": {"tf": 2}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 2}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 2}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 2}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 2.449489742783178}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 102}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 2}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 2}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 2}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 2.449489742783178}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 99}}}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}}, "df": 4}}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}}, "df": 5, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 14}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 2}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 7}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 42}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 2}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 9}, "docs": {}, "df": 0}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.7320508075688772}}, "df": 14}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 3}}}}}}, "x": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 3}, "n": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.score_fns.get_scorefn": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 2}}, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}}, "df": 3}, "d": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1.4142135623730951}}, "df": 2}, "x": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 2}, "s": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.6457513110645907}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}}, "df": 78, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 33}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 30}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 41, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 32, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"pycfx.helpers.visualisation.plot_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1.4142135623730951}}, "df": 12, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 2, "d": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}}, "df": 60, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 42}}}}}}}}}}}}}, "f": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1, "o": {"docs": {"pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 1}}}, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}}, "df": 1, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2.449489742783178}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 30}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 43}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 4}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}, "f": {"docs": {"pycfx.helpers.visualisation.plot_lof": {"tf": 1.4142135623730951}}, "df": 1}}, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1}}, "df": 3}}, "b": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}}, "df": 30}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}}, "df": 11}, "d": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.helpers.visualisation.plot_kernel": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 3}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 7}}}}}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 41}}}, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}, "g": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 3, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 4}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 2}}}}}}}}}}}, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 2.23606797749979}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}}, "df": 11}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 19}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}}, "df": 8, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 3}}}}}}}}}, "s": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}}, "df": 9}}}}}}}}}}}}}, "v": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.4142135623730951}}, "df": 16}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.kernels.get_kernel": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "b": {"docs": {"pycfx.helpers.visualisation.plot_dataset": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.helpers.visualisation.plot_kernel": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}}, "df": 4, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 43}, "a": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 34}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}}, "df": 1}, "p": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 2}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 2}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}}, "df": 33}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}}, "df": 27}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 205}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 7}}, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.23606797749979}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 2.23606797749979}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 2.449489742783178}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 34, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}}, "df": 5}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}, "e": {"docs": {"pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.get_scorefn": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}}, "df": 7}, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.get_scorefn": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}}, "df": 9, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 7}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 21}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}}, "df": 3, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 31}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1.4142135623730951}}, "df": 32}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 25}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 3}}}, "o": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1.7320508075688772}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.4142135623730951}}, "df": 17}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 2.449489742783178}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1.7320508075688772}}, "df": 2, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 33, "s": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 3}}}}}}}, "a": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1}}, "df": 2, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 30, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 26}}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 42}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 6}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.helpers.visualisation.plot_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1.4142135623730951}}, "df": 12}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {"pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 5, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 13}}}}, "w": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 3}}}}}}}, "x": {"1": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 5}, "2": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 5}, "docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_lof": {"tf": 2}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1.7320508075688772}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 104}, "y": {"1": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 3}, "2": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 3}, "docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1.4142135623730951}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_loss": {"tf": 2}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 2}, "pycfx.helpers.visualisation.plot_lof": {"tf": 2.23606797749979}, "pycfx.helpers.visualisation.plot_impl": {"tf": 2}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 70}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1}}, "df": 13}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 4, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 5}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.helpers.visualisation.plot_kernel": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}}, "df": 3}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 17}}}}}}, "h": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 4}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}, "z": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 3}}}, "bases": {"root": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 6, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 7}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 9, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 6}}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 18}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}}, "df": 2, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}}, "df": 2}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 9}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 9}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.conformal.score_fns.ScoreFn": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1.4142135623730951}}, "df": 8}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 7, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 3}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 3}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 7, "s": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 7}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 6}}}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models.mlp_keras.KerasMLP": {"tf": 1}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1.4142135623730951}}, "df": 2, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 1}}}}}}}, "doc": {"root": {"0": {"0": {"1": {"docs": {"pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "1": {"docs": {"pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 1}, "5": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 2}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 19}, "1": {"0": {"0": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 3}, "3": {"0": {"9": {"2": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"9": {"4": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3}, "6": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}, "7": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 18}, "2": {"0": {"0": {"0": {"0": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "1": {"1": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 2}, "7": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 1}, "9": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "2": {"0": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}, "1": {"docs": {"pycfx.conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 6}, "2": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}, "4": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"4": {"3": {"2": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"5": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"7": {"7": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "x": {"docs": {}, "df": 0, "w": {"2": {"0": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"1": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}, "7": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 7, "d": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}, "^": {"2": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "h": {"docs": {}, "df": 0, "^": {"2": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}, "3": {"3": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}, "4": {"2": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}, "5": {"0": {"docs": {"pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}}, "df": 2}, "8": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "6": {"4": {"docs": {"pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "8": {"docs": {"pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}, "docs": {"pycfx": {"tf": 1.4142135623730951}, "pycfx.benchmarker": {"tf": 4.47213595499958}, "pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 4.242640687119285}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.dataset": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_factuals_main": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.n_repeats": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.use_pretrained": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.metrics": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.model_factories": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generator_factories": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.save_dir": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_evaluation_path": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.factuals_path": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.counterfactuals_path": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_raw": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.eval_path_table_2": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.figs_save_dir": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generators_dir": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.models_dir": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_raw_path": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_text_path": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.conformal_eval_table": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.additional_conformal": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 2.449489742783178}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 2.8284271247461903}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 2.8284271247461903}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 2.449489742783178}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 2.8284271247461903}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 2.8284271247461903}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 5.744562646538029}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 2.23606797749979}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 4.58257569495584}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 4.123105625617661}, "pycfx.benchmarker.factories": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 3.3166247903554}, "pycfx.benchmarker.factories.ModelFactory.Model": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.input_properties": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.config": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.config_multi": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 2.6457513110645907}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 2.23606797749979}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 3}, "pycfx.benchmarker.factories.GeneratorFactory.generators_classes": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.config": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.config_multi": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.generators": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 3.3166247903554}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics.ImplausibilityMetric.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric.included_prop": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 2}, "pycfx.benchmarker.metrics.LOFMetric.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.n_neighbours": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.stratified": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.DistanceMetric.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.norm": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.mad": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.dist_weight": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.n_sensitivity": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.n_neighbours": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.budget": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 3.3166247903554}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.n_neighbours": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.budget": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 4}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1.7320508075688772}, "pycfx.conformal": {"tf": 5.477225575051661}, "pycfx.conformal.conformal_benchmarker": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 4.69041575982343}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 5.0990195135927845}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 6.782329983125268}, "pycfx.conformal.conformal_helpers": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 4.47213595499958}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.KERNEL_REGISTRY": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels.register_kernel": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels.get_kernel": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.feature_distance": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 2}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 2.8284271247461903}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_name": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel_bandwidth_scaling": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.kernel": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.sample_threshold": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.dim_reduction": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.scores_nonlocalised": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.med_pairwise_distance": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.is_calibrated": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.y_calib": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.X_calib_encoded": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 2.23606797749979}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.parent": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.left_node": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.right_node": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.value": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.threshold": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.feature": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.points": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.scores": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.alpha": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.max_distance": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.is_leaf": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.inf_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.global_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.n_dims": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 2.8284271247461903}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.kernel_bandwidth_scaling": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.inf_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.global_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.cat_groups_to_ignore": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.min_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.is_calibrated": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.med_pairwise_distance": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gs": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.categorical_values_combinations": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.trees": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.conformal": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.T": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.kappa": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 2}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.kappa": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 2}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.kappa": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 2}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 2.6457513110645907}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 3.3166247903554}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 2.6457513110645907}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 3}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.SCOREFN_REGISTRY": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 2.6457513110645907}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 2}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 2}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 2.6457513110645907}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 2.6457513110645907}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 2.6457513110645907}, "pycfx.conformal.split_conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 2.8284271247461903}, "pycfx.conformal.split_conformal.SplitConformalPrediction.model": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.input_properties": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.config": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.alpha": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn_name": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scorefn": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.dim_reduction": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.is_calibrated": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.scores": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calib_preds": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.save_path": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.use_pretrained": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 3}, "pycfx.counterfactual_explanations": {"tf": 7.745966692414834}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 3.605551275463989}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_class": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.conformal_config": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.model": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.input_properties": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.save_dir": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.config": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.use_pregenerated": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 2.8284271247461903}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 4.69041575982343}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.model": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.norm": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.dist_weight": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.mad": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.n_iter": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.lr": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.min_max_lambda": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.backend": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.db_distance": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.grb_model": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.output_vars": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.clf_constraints": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_vars": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.distance_constrs": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.ord": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.differentiable": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.LOSSES_REGISTRY": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 3.1622776601683795}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.norm": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.mad": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss.dist_weight": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.decay": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss.reg_strength": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow.update_step": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 3.4641016151377544}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OPTIMISATION_LOOPS": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 4.795831523312719}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.model": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.input_properties": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.n_iter": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.lr": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.early_stopping": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.min_max_lambda": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.losses_weights": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.latent_encoding": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.retain_graph": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.jsma": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.tensor_bounds": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.model": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.z_factual": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_enc": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_enc": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.x_factual": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_factual": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.y_target": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.it": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState.n_it": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 3.4641016151377544}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 3}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 2.6457513110645907}, "pycfx.counterfactual_explanations.external": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 2}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l1": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_featuretweak.distance_cost_l2": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 2}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 3}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.epsilon": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.cost_fn": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 2}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 2}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 3.3166247903554}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.distance_func": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.n_iter": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 2.6457513110645907}, "pycfx.datasets": {"tf": 8.18535277187245}, "pycfx.datasets.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.RANDOM_STATE": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 2}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 2}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 2.23606797749979}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 4.123105625617661}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 2.6457513110645907}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticMoons": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 2.449489742783178}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 2.6457513110645907}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 2.449489742783178}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 2.23606797749979}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.AdultIncome": {"tf": 2.8284271247461903}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 2}, "pycfx.datasets.dim_reduction.DimensionalityReduction.target_dim": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 2.6457513110645907}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 2.8284271247461903}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 3}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 2.6457513110645907}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 2.8284271247461903}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 3}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 2.6457513110645907}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 2.8284271247461903}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 2.449489742783178}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 2.6457513110645907}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 2.8284271247461903}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 2.6457513110645907}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 2.8284271247461903}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 3}, "pycfx.datasets.input_properties": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2.449489742783178}, "pycfx.datasets.input_properties.InputProperties.n_targets": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.feature_names": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.feature_classes": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.n_features": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.bound": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.y_onehot": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.n_distinct_features": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.all_idx": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 2.23606797749979}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 2.23606797749979}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 2.23606797749979}, "pycfx.helpers": {"tf": 1.4142135623730951}, "pycfx.helpers.constants": {"tf": 1.4142135623730951}, "pycfx.helpers.constants.BACKEND_PYTORCH": {"tf": 1.7320508075688772}, "pycfx.helpers.constants.BACKEND_TENSORFLOW": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_dataset": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_split_dataset": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_decision_boundary": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_counterfactual": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction_histogram": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_conformal_prediction_coverage": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_kernel": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_loss": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_loss_with_gradients": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_lof": {"tf": 1.7320508075688772}, "pycfx.helpers.visualisation.plot_impl": {"tf": 1.7320508075688772}, "pycfx.library": {"tf": 2.23606797749979}, "pycfx.library.featureTweakPy": {"tf": 2}, "pycfx.library.featureTweakPy.search_path": {"tf": 1.4142135623730951}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1.7320508075688772}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}, "pycfx.library.tree_model_encoding": {"tf": 2}, "pycfx.models": {"tf": 6.4031242374328485}, "pycfx.models.abstract_model": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 2.8284271247461903}, "pycfx.models.abstract_model.AbstractModel.model": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.config": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.random_state": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.input_properties": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.save_dir": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 2.23606797749979}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 2}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 2}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 2.6457513110645907}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 2.6457513110645907}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 2}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 2.6457513110645907}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 2.6457513110645907}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 3}, "pycfx.models.decisiontree_sklearn": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 3}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.config": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.random_state": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.model": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 2.6457513110645907}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 3}, "pycfx.models.gradientboosting_sklearn": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 3}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.config": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.random_state": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.model": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 2.6457513110645907}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 3}, "pycfx.models.latent_encodings": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 2.8284271247461903}, "pycfx.models.mlp_keras.KerasModel.batch_size": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.epochs": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.lr": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 2}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 2}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 2}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 2.6457513110645907}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 3}, "pycfx.models.mlp_pytorch": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 2.8284271247461903}, "pycfx.models.mlp_pytorch.PyTorchModel.batch_size": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.epochs": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.lr": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.device": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 2}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 2}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 2}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 2.6457513110645907}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 3}, "pycfx.models.randomforest_sklearn": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 3}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.n_estimators": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_depth": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.max_n_leaves": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.model": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}}, "df": 591, "d": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx": {"tf": 1}}, "df": 1}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}}, "df": 2}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 33, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 69, "s": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 3}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 5}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}}, "df": 1}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 20, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 4}}}}}}}}, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 21, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 15}}}}}}}}, "d": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1.4142135623730951}}, "df": 1}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}}, "df": 5}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}}, "df": 1, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "m": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 14, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}}, "df": 5, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {"pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 4}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 1}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.models": {"tf": 1}}, "df": 8, "d": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}, "s": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 8}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 10}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}}}}}}}}}, "p": {"2": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "f": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 2}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}}, "df": 1}, "c": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}, "f": {"1": {"docs": {"pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 3}, "docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx": {"tf": 1}, "pycfx.benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2.449489742783178}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 2.23606797749979}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.helpers": {"tf": 1}, "pycfx.library": {"tf": 1.4142135623730951}, "pycfx.models": {"tf": 2}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 140, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}}, "df": 3}}}, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}}, "df": 21, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 2}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 2}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 16}}}}}, "e": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 4}}}}}}, "r": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}}, "df": 1}, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 3}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 4, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 8}}, "x": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 6}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 41}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 12, "s": {"docs": {"pycfx.conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 6}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 3}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.models": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}}, "df": 16, "s": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 8}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}}, "df": 5}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 3}}, "x": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 4}, "c": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.split_conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.helpers.constants": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1.4142135623730951}, "pycfx.library.tree_model_encoding": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}}, "df": 44, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {"pycfx": {"tf": 1}, "pycfx.benchmarker": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.helpers": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.models": {"tf": 1}}, "df": 8, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_helpers": {"tf": 1}}, "df": 2}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.kernels": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 3}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.split_conformal": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.milp_utils": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}}, "df": 11}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.datasets.dim_reduction": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.helpers.constants": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.helpers.visualisation": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library.featureTweakPy": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.abstract_model": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.decisiontree_sklearn": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.gradientboosting_sklearn": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.latent_encodings": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.randomforest_sklearn": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 10, "/": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 2}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.register_kernel": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.models": {"tf": 1}}, "df": 13, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 2}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 2}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}}, "df": 18}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1}, "d": {"docs": {"pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 4}}, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}}, "df": 1}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 43}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 3}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 10, "d": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 2}, "s": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 1}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 13}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.conformal": {"tf": 2.23606797749979}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 29, "s": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 7}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 4}}}, "s": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 8}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}}, "df": 5}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 3}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}}, "df": 13}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}}, "df": 7}}}}}}}, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 3}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1.4142135623730951}}, "df": 2}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 3}}}}}}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}}, "df": 1}}}, "b": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 32, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.benchmarker": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}}, "df": 9}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}}, "df": 2}}}}}}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 12}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}}, "df": 1}}, "w": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 2.449489742783178}}, "df": 13, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}}, "df": 1}}, "d": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 6}}}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 5, "d": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.models": {"tf": 1}}, "df": 15}, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}}, "df": 3}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 15}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 10, "s": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 3}}}, "d": {"docs": {"pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}}, "df": 2}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 48}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}}, "df": 2}}}}, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 2.23606797749979}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 5}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.gradientboosting_sklearn": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 2}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 28, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 15}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}}, "df": 18, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}}, "df": 8}, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}}}}, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 1}}}, "k": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 2}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 2}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 2}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1.7320508075688772}}, "df": 25, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}}, "df": 3}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal": {"tf": 2.6457513110645907}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.split_conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}}, "df": 32, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}}, "df": 5, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 5, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}}, "df": 3}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 22}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}}, "df": 6}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.milp_utils": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.helpers": {"tf": 1}, "pycfx.helpers.constants": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 9}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 1}}}}}}}, "v": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 3}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 3.1622776601683795}}, "df": 6}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.library": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 3}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.library": {"tf": 1}}, "df": 1}}}, "y": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}, "f": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}}, "df": 5, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}, "x": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 23, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 15}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 9}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.4142135623730951}}, "df": 12, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}}, "df": 16}}}, "e": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}}, "df": 3, "d": {"docs": {"pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}, "l": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}}, "df": 1, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2.23606797749979}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 4}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 2}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.7320508075688772}}, "df": 54, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 12}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 1}}, "df": 5}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 8, "d": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1.4142135623730951}}, "df": 4, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}}, "df": 3}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 5}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 2}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}}, "df": 5, "s": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}, "d": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 3}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {"pycfx.conformal": {"tf": 1}}, "df": 1}, "s": {"docs": {"pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}}, "df": 18, "s": {"docs": {"pycfx.benchmarker": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}}, "df": 13}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.datasets": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 12, "s": {"docs": {"pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 7}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.4142135623730951}}, "df": 1}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 5}}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1.4142135623730951}, "pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 126, "s": {"docs": {"pycfx.benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.models": {"tf": 2}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 18}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}}, "df": 3}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.library": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}}, "df": 2}}, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 2.449489742783178}}, "df": 3}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 5}}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 1}}, "d": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}}, "df": 2}}, "x": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}}, "df": 13, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 3}}}}}}}, "j": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 4, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 7, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 6, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}}, "df": 1}}}}}}}}, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.library": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 2}}}}}}}}}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}}, "df": 3}}}, "n": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 7, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 7}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 4}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 26, "s": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}}, "df": 5}}}}, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}}, "df": 4}, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 9, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}}, "df": 10, "s": {"docs": {"pycfx.benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1.4142135623730951}, "pycfx.conformal": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.library": {"tf": 1}}, "df": 25}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}}, "df": 17, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 7}}}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 45}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}}, "df": 5, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 5, "n": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 43}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}}, "df": 3}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 8}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}}, "df": 5, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.7320508075688772}}, "df": 1}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 20}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 3}}}}}}}}, "a": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 2}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2.449489742783178}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 2}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2.23606797749979}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1.4142135623730951}}, "df": 168, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 48, "d": {"docs": {"pycfx.benchmarker": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 2}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2.23606797749979}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 2}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets": {"tf": 2}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.helpers": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 168, "/": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 8}}, "l": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 11, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 19, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 24, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 9}}}, "t": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 4}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}}, "df": 5, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}}, "df": 1}}}}}}, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.models": {"tf": 1}}, "df": 4}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 5}}}}}}, "d": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}}}}}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 10}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 19, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 5}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}}, "df": 1}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 3}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 16, "s": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 6}, "g": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 3}}}}}}}}, "s": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 13, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}}, "df": 10}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}}, "df": 2}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1.4142135623730951}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 3}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}}, "df": 1}}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 21, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.datasets": {"tf": 1}}, "df": 3}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 10}}}}}}}, "f": {"docs": {"pycfx.benchmarker": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 2.23606797749979}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2.449489742783178}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 158, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 5}}}}, "b": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 25, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 7}}}}}}, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 8, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 4}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}}, "df": 3}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 23, "d": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.7320508075688772}}, "df": 4, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 2}}, "s": {"docs": {"pycfx.library": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "/": {"1": {"0": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "/": {"2": {"2": {"0": {"6": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 16, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 3, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.7320508075688772}}, "df": 17, "s": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 1}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}}, "df": 8, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 16}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}}, "df": 5}, "d": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}}, "df": 4}}}, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 69, "o": {"docs": {}, "df": 0, "u": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.models": {"tf": 1.4142135623730951}}, "df": 2, "r": {"docs": {"pycfx.models": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 6, "o": {"docs": {"pycfx.benchmarker": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 2.23606797749979}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.6457513110645907}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 2.23606797749979}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 2}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2.449489742783178}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.7320508075688772}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 2}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 2.23606797749979}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 2}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 2.23606797749979}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 2}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 2}, "pycfx.models.abstract_model": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 2.23606797749979}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 2.23606797749979}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1.4142135623730951}}, "df": 166, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}}, "df": 1}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}}, "df": 3}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.helpers.visualisation": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_dataset": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.6457513110645907}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 2}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 2.449489742783178}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 2}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 2}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 2.6457513110645907}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 3.4641016151377544}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 2}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 2.449489742783178}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 2}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 3.1622776601683795}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 2}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 2.23606797749979}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 2.449489742783178}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 2}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 2}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 2}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1.7320508075688772}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 2}, "pycfx.library.tree_model_encoding": {"tf": 1.7320508075688772}, "pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 243, "i": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.models": {"tf": 1}}, "df": 7}}, "n": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.library": {"tf": 1}}, "df": 3}, "y": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1}, "m": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}}, "df": 6}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1.4142135623730951}}, "df": 48}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 14}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 5}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 5}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 3}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1.7320508075688772}}, "df": 17, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}}, "df": 3}}}}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1.4142135623730951}}, "df": 5, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.7320508075688772}}, "df": 45, "s": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 14}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}}, "df": 1}}}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}}, "df": 8}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 2}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 2}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1.7320508075688772}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1.7320508075688772}}, "df": 26, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 24}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 6}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1.4142135623730951}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1.7320508075688772}, "pycfx.models": {"tf": 1}, "pycfx.models.decisiontree_sklearn": {"tf": 1}}, "df": 14, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 2}, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 7}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.helpers.visualisation": {"tf": 1}}, "df": 1}}}}}}}}, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 21, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.7320508075688772}}, "df": 18, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 21}}, "c": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}}, "df": 8}, "y": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}}, "df": 12, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.split_conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}}, "df": 13}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}}, "df": 3}}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 14}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 3, "d": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 4}, "r": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}}, "df": 15, "f": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.score_fns.ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}}, "df": 9}}, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 11}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 20, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}}, "df": 5}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1.4142135623730951}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2.6457513110645907}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 3.4641016151377544}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 2}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.datasets.Dataset.set_split_indicies": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 55, "u": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.setup_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 9}}, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}}, "df": 4}, "d": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 1}}}, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.OptimisationState": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 13, "d": {"docs": {"pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3}}, "i": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 4}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "z": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.save": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.save": {"tf": 1.4142135623730951}}, "df": 31, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 5}, "d": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 3}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 5}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}}, "df": 5, "s": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}}, "df": 13}, "d": {"docs": {"pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 1}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}}, "df": 5}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}}, "df": 5, "[": {"0": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations": {"tf": 2}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}}}, "b": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.models": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}}, "df": 14}}}}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}, "m": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 3}, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1.4142135623730951}}, "df": 1}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}}, "df": 23, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 2}, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 10, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}}, "df": 6}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 5}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 9, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.decisiontree_sklearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 16}}}}}}, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 5, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets": {"tf": 1}}, "df": 1}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 24, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 9, "s": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}}, "df": 6, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.4142135623730951}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.name": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.name": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.name": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_name": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 32, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 2.23606797749979}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.7320508075688772}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 5}}}, "n": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}}, "df": 1}}, "o": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}}, "df": 5, "t": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 8, "e": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 5, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.helpers.visualisation": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 9, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 3}}}}}}}}, "n": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 6}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 8}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.splitting_threshold": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 5, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 3}}}}, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 1}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 2}}}}}}}}}}}, "w": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 15}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}}, "df": 4, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.models": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 44, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.score_fns": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 21}, "s": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}}, "df": 8}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}}, "df": 6}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.calibrate": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 17}}}}, "p": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 12, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 3}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.datasets": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {"pycfx.conformal.milp_utils": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 4}}}, "i": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 12, "n": {"docs": {"pycfx.benchmarker": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.7320508075688772}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 2}, "pycfx.helpers.visualisation": {"tf": 1}, "pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 42, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.initialise_generators": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 24}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}}, "df": 6}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 3, "d": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets": {"tf": 1.4142135623730951}}, "df": 3}, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.name": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1.7320508075688772}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}, "x": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 4}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 1}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.library": {"tf": 1}}, "df": 10}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 2.23606797749979}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}}, "df": 5}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}}}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 4}}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.dim_reduction": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 35, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.conformal.milp_utils": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 4}}}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1.7320508075688772}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 60, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_input_properties": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.input_properties": {"tf": 1}}, "df": 16}}}}}}}}}}, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {"pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.input_properties": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties": {"tf": 1}}, "df": 2}}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}}, "df": 1}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}}, "df": 1}}}}}}}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.localised_conformal_tree": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_pytorch": {"tf": 1}}, "df": 19}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}}, "df": 4}}}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}}, "df": 1}}}}}}}, "f": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 19}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 42, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 9, "s": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 3, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}}, "df": 3, "d": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}}, "df": 1}}}}}}}, "r": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 3, "e": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1.4142135623730951}}, "df": 8, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker": {"tf": 2}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 6, "/": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}}, "df": 4}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {"pycfx.library": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}}, "df": 1}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 5}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}}, "df": 11, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 4}}}}}}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.get_node_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.get_tree": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 50, "s": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.DistanceMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.compute_metric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric.compute_metric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}}, "df": 23}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}}, "df": 3}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 1}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}}, "df": 1}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}}, "df": 6}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}}, "df": 7}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.name": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}}, "df": 15}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}}, "df": 5}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}}, "df": 1}}}}}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}}, "df": 1}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 4}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.7320508075688772}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 14, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}}, "df": 3}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.7320508075688772}}, "df": 1, "s": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 7}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 1}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}}}}, "j": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}}, "df": 6}}, "m": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}, "l": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 1, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}, "l": {"1": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 2}, "2": {"docs": {"pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}}, "df": 1}, "docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"pycfx.benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 4}, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}}, "df": 5}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}}, "df": 3}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.7320508075688772}}, "df": 11, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}}, "df": 16}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 5}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.models": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load": {"tf": 1}}, "df": 5, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 3}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.datasets.dim_reduction": {"tf": 1}}, "df": 6}}}, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.register_loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.Loss.loss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.ClassificationLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer.step": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.compute_loss": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 22, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.7320508075688772}}, "df": 5}}}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}}, "df": 3}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 1}, "p": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.register_optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation": {"tf": 1.4142135623730951}}, "df": 9, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 5}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.get_generators": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.get_labels": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 14}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "r": {"2": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1}}, "df": 3}, "docs": {"pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets.datasets.SyntheticLinearlySeparable": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.library": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 12}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1, "d": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}}, "df": 1, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 10}}}}}, "f": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate": {"tf": 1}, "pycfx.library.featureTweakPy.search_path": {"tf": 1.4142135623730951}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 5}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.size_tree": {"tf": 1}}, "df": 1}}}}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_lcp": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 3}, "c": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}}, "df": 1}}, "r": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}}, "df": 2}, "d": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}}, "df": 6, "i": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker": {"tf": 1}}, "df": 1, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}}, "df": 1}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}}, "df": 3, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 5}}}}, "r": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.benchmarker.factories": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}}, "df": 6, "s": {"docs": {"pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1.4142135623730951}}, "df": 10}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 7}, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 6}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}}, "df": 1}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.helpers": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.ValidityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_classification_constraint": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 20, "x": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}}, "df": 1, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}}, "df": 2, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 16, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.cf_conformal": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour": {"tf": 1}}, "df": 5}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.losses": {"tf": 1}}, "df": 1}}}}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "f": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 13, "s": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.predict": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.predict": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.predict": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.predict": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.predict": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.predict": {"tf": 1}}, "df": 8}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.library": {"tf": 1.4142135623730951}, "pycfx.models": {"tf": 1}}, "df": 3, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1}}, "df": 3}}}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.abstract_model.AbstractModel.savename": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.savename": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}}, "df": 5}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1.4142135623730951}}, "df": 1, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.test_conformal": {"tf": 1}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 5, "d": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_additional_conformal": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_models": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.evaluate_counterfactuals": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 2}}, "df": 4}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.conformal_benchmarker": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}}, "df": 1}}}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.check_solution": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 5, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}}, "df": 6, "d": {"docs": {"pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding.decode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.encode": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding.decode": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.generate_sklearn_representation": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}, "pycfx.models.latent_encodings.LatentEncoding": {"tf": 1}, "pycfx.models.latent_encodings.IdentityEncoding": {"tf": 1}}, "df": 20, "s": {"docs": {"pycfx.library": {"tf": 1}, "pycfx.models.latent_encodings": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1.4142135623730951}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.metrics.FailuresMetric": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {"pycfx.benchmarker.metrics.ImplausibilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 11, "c": {"docs": {"pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 1}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.7320508075688772}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2.8284271247461903}}, "df": 3}}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 2}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn.gp_encode_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.get_feature_details": {"tf": 1}, "pycfx.library": {"tf": 1}}, "df": 18}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets.datasets.Dataset": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 1}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}}, "df": 4, "s": {"docs": {"pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss": {"tf": 1}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}}, "df": 4}}}}, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.SalientFeatureOptimizer_TensorFlow": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.SalientFeatureOptimizer": {"tf": 1}}, "df": 3}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 2}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "~": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.library.featureTweakPy.search_path": {"tf": 1}}, "df": 1, "s": {"docs": {"pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.__init__": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.__init__": {"tf": 1.7320508075688772}, "pycfx.benchmarker.factories.GeneratorFactory": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.__init__": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric": {"tf": 1}, "pycfx.benchmarker.metrics.LOFMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.7320508075688772}, "pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.milp_utils.gp_set_np_mvar": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.get_loss_with_backend": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.save_to_dir": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 67, "i": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.set_factuals": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_counterfactuals": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.__init__": {"tf": 1}}, "df": 10}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 2}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1.4142135623730951}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 11}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.leaf_criterion_fulfilled": {"tf": 1}}, "df": 1}}, "e": {"docs": {"pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}}, "df": 4}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_table": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.CFBenchmarkerMetric.get_bank": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric.get_factuals_bank": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.kernels.feature_distance": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.__init__": {"tf": 1}, "pycfx.datasets.datasets.Dataset": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.gp_set_input_var_constraints": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel.gp_set_model_constraints": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP.gp_set_model_constraints": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchMLP.gp_set_model_constraints": {"tf": 1}}, "df": 36}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 1}}, "n": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.compute_stats_partition": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.__init__": {"tf": 1}}, "df": 4}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.7320508075688772}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}}, "df": 5}}}}}}, "e": {"docs": {"pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.DistanceLoss": {"tf": 1}}, "df": 6}}, "s": {"docs": {"pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.abstract_model": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.DifferentiableModel": {"tf": 1}, "pycfx.models.abstract_model.MILPEncodableModel": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.mlp_pytorch": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.load_external": {"tf": 1.4142135623730951}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn": {"tf": 1}}, "df": 20, "s": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.GradientBasedGenerator.__init__": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}, "n": {"docs": {}, "df": 0, "t": {"docs": {"pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.models.abstract_model.AbstractModel.load_from_dir": {"tf": 1}}, "df": 1}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_alpha_bandwidth_plots": {"tf": 1.4142135623730951}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.generate_conformal_sim_plot": {"tf": 1}, "pycfx.conformal": {"tf": 1}, "pycfx.conformal.kernels": {"tf": 1}, "pycfx.conformal.kernels.register_kernel": {"tf": 1.4142135623730951}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1.7320508075688772}, "pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 2}, "pycfx.conformal.milp_utils.gp_get_weights": {"tf": 1.4142135623730951}}, "df": 12}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.counterfactual_explanations.differentiable.optimisation_keras": {"tf": 1}, "pycfx.models": {"tf": 1}, "pycfx.models.mlp_keras": {"tf": 1.7320508075688772}, "pycfx.models.mlp_keras.KerasModel": {"tf": 1}}, "df": 4, "m": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {"pycfx.models": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.models": {"tf": 1}, "pycfx.models.mlp_keras.KerasMLP": {"tf": 1}}, "df": 2}}}}}}}}, "y": {"docs": {"pycfx.conformal.kernels.get_kernel": {"tf": 1}, "pycfx.conformal.score_fns.register_scorefn": {"tf": 1.4142135623730951}, "pycfx.conformal.score_fns.get_scorefn": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.__init__": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.__init__": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.__init__": {"tf": 1}}, "df": 9, "s": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.factories.ModelFactory.get_models_over_repeats": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {"pycfx.conformal.losses_conformal.SetSizeLoss.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.__init__": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}}, "df": 6}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1.4142135623730951}}, "df": 5}}}}}, "o": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.Dataset.__init__": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal": {"tf": 1}}, "df": 2}}}}}}, "h": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 7, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.get_means_sds": {"tf": 1}, "pycfx.benchmarker.counterfactual_benchmarker.CFBenchmarker.format_table_with_structure": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.is_correct_classification": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.datasets.datasets.Dataset.median_pairwise_distances": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_test_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}}, "df": 17, "s": {"docs": {"pycfx.conformal.conformal_helpers": {"tf": 1.4142135623730951}, "pycfx.helpers": {"tf": 1.4142135623730951}, "pycfx.helpers.constants": {"tf": 1}, "pycfx.helpers.visualisation": {"tf": 1}}, "df": 4, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.abstract_model.DifferentiableModel.get_backend": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.get_backend": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.get_backend": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.benchmarker.metrics.DistanceMetric": {"tf": 1}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}}, "df": 3}, "t": {"docs": {"pycfx.conformal.localised_conformal_tree.ConformalCONFEXTree.__init__": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.gp_set_singleton_constraint": {"tf": 1}}, "df": 2}, "f": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}}, "df": 3}}}}}, "l": {"docs": {}, "df": 0, "d": {"docs": {"pycfx.datasets.datasets.Dataset.get_ord_bounds": {"tf": 1}}, "df": 1}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.visualise": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.conformal.score_fns.MILPEncodableScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF": {"tf": 1}, "pycfx.datasets": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.__init__": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 6}, "v": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 1}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"pycfx.datasets.dim_reduction.AutoencoderDimReduction": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"pycfx.counterfactual_explanations": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.losses.EnergyLoss": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator": {"tf": 1}, "pycfx.library.featureTweakPy": {"tf": 1}, "pycfx.library.tree_model_encoding": {"tf": 1}}, "df": 8}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.datasets": {"tf": 1.4142135623730951}, "pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 4}}}, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}}, "df": 2}}}}}}, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"pycfx.datasets.datasets.GermanCredit": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1.4142135623730951}}, "df": 5}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {"pycfx.datasets.dim_reduction.SecondLastLayerReduction": {"tf": 1}}, "df": 1}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"pycfx.datasets.datasets.CaliforniaHousing": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome": {"tf": 1}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.datasets.datasets.Dataset.compute_radius_from_budget": {"tf": 1}, "pycfx.datasets.datasets.Dataset.sample_neighbours": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"pycfx.models.abstract_model.AbstractModel.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"pycfx.models.mlp_keras.KerasModel.__init__": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.__init__": {"tf": 1}}, "df": 2}}}}}}, "x": {"1": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1}}}, "2": {"docs": {"pycfx.conformal.kernels.register_kernel": {"tf": 1}, "pycfx.conformal.kernels.gaussian_kernel": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l1": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_l2": {"tf": 1}, "pycfx.conformal.kernels.box_kernel_linf": {"tf": 1}}, "df": 5, "[": {"docs": {}, "df": 0, "i": {"docs": {"pycfx.conformal.kernels.feature_distance": {"tf": 1}}, "df": 1}}}, "docs": {"pycfx.benchmarker.factories.ModelFactory.train_models": {"tf": 1}, "pycfx.benchmarker.factories.GeneratorFactory.setup_generators": {"tf": 1.4142135623730951}, "pycfx.benchmarker.metrics.SensitivityMetric": {"tf": 2.23606797749979}, "pycfx.benchmarker.metrics.StabilityMetric": {"tf": 1}, "pycfx.benchmarker.metrics.define_counterfactual_targets": {"tf": 1}, "pycfx.conformal.conformal_benchmarker.evaluate_conditional": {"tf": 1}, "pycfx.conformal.conformal_helpers.sample_points": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.get_feature_ranges": {"tf": 1.4142135623730951}, "pycfx.conformal.conformal_helpers.generate_grid_points": {"tf": 1}, "pycfx.conformal.conformal_helpers.median_pairwise_distances": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.predict_batch": {"tf": 1.4142135623730951}, "pycfx.conformal.losses_conformal.SetSizeLoss.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.loss": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.loss": {"tf": 1}, "pycfx.conformal.score_fns.SoftmaxScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.Linear2ScoreFn": {"tf": 1}, "pycfx.conformal.score_fns.LinearNormalisedScoreFn": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.get_scores": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.predict_batch": {"tf": 1}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_conformal.ConformalCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_generator.CounterfactualGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.WachterGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.ECCCOGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_gradient_based.SchutGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_mindist.MinDistanceCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.setup": {"tf": 1.4142135623730951}, "pycfx.counterfactual_explanations.cf_nearestneighbour.NearestNeighbourCF.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.get_model_prediction": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_keras.KerasMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_loop.DifferentiableOptimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.setup": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.fix_encoding": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_minmax": {"tf": 1}, "pycfx.counterfactual_explanations.differentiable.optimisation_pytorch.PyTorchMLP_Optimisation.optimise_min": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_featuretweak.FeatureTweakGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactual": {"tf": 1}, "pycfx.counterfactual_explanations.external.cf_focus.FOCUSGenerator.generate_counterfactuals": {"tf": 1}, "pycfx.datasets.datasets.Dataset.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y": {"tf": 1}, "pycfx.datasets.datasets.Dataset.get_X_y_split": {"tf": 1.7320508075688772}, "pycfx.datasets.datasets.SyntheticLinearlySeparable.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMoons.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticMulticlass.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.SyntheticBimodal.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GermanCreditv2.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.GiveMeSomeCredit.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.CaliforniaHousing.define_dataset": {"tf": 1}, "pycfx.datasets.datasets.AdultIncome.define_dataset": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.DimensionalityReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.PCADimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.LDADimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.LDADimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.SecondLastLayerReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.setup": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.encode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.decode": {"tf": 1}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_encoding": {"tf": 1.4142135623730951}, "pycfx.datasets.dim_reduction.AutoencoderDimReduction.gp_dim_decoding": {"tf": 1.4142135623730951}, "pycfx.datasets.input_properties.InputProperties.check_valid_instance": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.fix_encoding": {"tf": 1}, "pycfx.datasets.input_properties.InputProperties.describe_instance": {"tf": 1}, "pycfx.library.featureTweakPy.esatisfactory_instance": {"tf": 1}, "pycfx.library.featureTweakPy.feature_tweaking": {"tf": 1.4142135623730951}, "pycfx.models.abstract_model.AbstractModel.train": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.evaluate": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_save_evaluation": {"tf": 1}, "pycfx.models.abstract_model.AbstractModel.load_or_train": {"tf": 1}, "pycfx.models.decisiontree_sklearn.DecisionTreeSKLearn.train": {"tf": 1}, "pycfx.models.gradientboosting_sklearn.GradientBoostingSKLearn.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.train": {"tf": 1}, "pycfx.models.mlp_keras.KerasModel.evaluate": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.train": {"tf": 1}, "pycfx.models.mlp_pytorch.PyTorchModel.evaluate": {"tf": 1}, "pycfx.models.randomforest_sklearn.RandomForestSKLearn.train": {"tf": 1}}, "df": 99}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"pycfx.conformal.localised_conformal_lcp.BaseLCP.calibrate": {"tf": 1}, "pycfx.conformal.localised_conformal_lcp.BaseLCP.gp_set_conformal_prediction_constraint": {"tf": 1.4142135623730951}, "pycfx.conformal.localised_conformal_tree.CONFEXTreeNode.__init__": {"tf": 2}, "pycfx.conformal.losses_conformal.SetSizeLoss.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_PyTorch.soft_label_assignment": {"tf": 1}, "pycfx.conformal.losses_conformal.SetSizeLoss_TensorFlow.soft_label_assignment": {"tf": 1}, "pycfx.conformal.milp_utils.gp_get_quantile": {"tf": 1.7320508075688772}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile": {"tf": 1.4142135623730951}, "pycfx.conformal.milp_utils.gp_get_weighted_quantile_new": {"tf": 1}, "pycfx.conformal.split_conformal.SplitConformalPrediction.calibrate": {"tf": 1}}, "df": 10}}}}}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();